<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ideas on 记事本</title>
    <link>https://pub.oribos.cn/tags/ideas/</link>
    <description>Recent content in ideas on 记事本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©nierheim</copyright>
    <lastBuildDate>Thu, 27 Feb 2020 23:23:21 +0800</lastBuildDate><atom:link href="https://pub.oribos.cn/tags/ideas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>三类优秀的程序员</title>
      <link>https://pub.oribos.cn/web/reprint/2020022701/</link>
      <pubDate>Thu, 27 Feb 2020 23:23:21 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/reprint/2020022701/</guid>
      <description>引用自reuixiy
通常，科学家、发明家、企业家、工程师都是职业的并列对象，这里，我们把这四者跃迁到属性，把属于工程师的程序员跃迁为对象，来看看程序员的类型。
第一类：程序员［科学家］·形而上学
这类比较专一，通常是一领域的精通者，通常是拿显微镜在看针尖，熟知其领域的每一细节，优化每一常人不知道的细节到极致。这类的新发现能让常人耳目一新，下两类的新发明则能让人眼前一亮。还有，这类与以下两类不同，这类不像以下两类一样「产量」高。
第二类：程序员［发明家］·哲学
这类比较广博，通常是多领域的通识者，这类有两个对象：一、纵向为主的，拓扑是链式的；二、横向为主的，拓扑是网状的。
第三类：程序员［企业家］·政治伦理
这类与以上两类又不同，以上两类求理论之美，这类则是求应用之美。与上一类不同，上一类的发明可能会比较生棱极客，这类的发明则可以称为产品，更能博得常人喜欢，所以总是能够成就很大的商业价值。
其他的，就回退到程序员的默认属性——工程师，使用重复的模板，建造同样的重复的建筑（当然，这里是对整体而言，而对其中的每一个体而言，体验的都是新鲜的「创造」）。最后，以上三类的共同之处，生活中都有好像永不褪色的热情和好奇心，这是以上三类能够成就优秀的凭借。
至于我，目前只是一个正步入程序员世界中的工程师的入门学徒，一个正入局的局外人。</description>
    </item>
    
    <item>
      <title>引号的逻辑的哲学</title>
      <link>https://pub.oribos.cn/web/reprint/002.html</link>
      <pubDate>Fri, 31 Jan 2020 08:56:33 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/reprint/002.html</guid>
      <description>引用自reuixiy
我们知道，对于引号，在小学的时候老师教我们要先使用「双引号」（“”），然后如果双引号里面还要使用引号，则要使用「单引号」（‘’）。举例来说：1
他站起来问：“老师，‘什么是哲学’的‘哲学’是什么意思？”
这种用法，可能我们从小学用到现在，自己也从来没有问过一个..为什么..，直到当我们接触到直角引号的时候。什么是直角引号呢？举例来说：
他站起来问：「老师，『什么是哲学』的『哲学』是什么意思？」
当我们看到这个例子的第一眼，一定会..肯定..：双引号与单引号用反了。可这个例子其实是正确的。2
终于，我们不得不问：为什么会有这样的差异呢？为什么对于直角引号，要先使用 「」 再使用 『』 呢？为什么要先使用双引号 “” 再使用单引号 ‘’ 呢？第三个问题暂时不答，但我们可以通过回答第二个问题来回答第一个问题——因为当引用内再进行引用时，这个引用就是「第二引用」，也就自然应该用「双层」的引号，即双引号。3
但其实，我写这篇文章的最初推动是为了鼓吹哲学的作用。也就是说，为什么我们会肯定地说「双引号与单引号用反了」呢？因为我们已将「先使用双引号再使用单引号」这句话深深刻入了自己的脊髓，故对于引号的使用，我们都是直接本能地机械执行这句话，而非通过大脑去质问其定义——为什么要先使用双引号再使用单引号。4而哲学的作用就是——通过对「定义」的定义的不断探求，来纠正错误的机械执行。
说明：改自维基百科引号词条的例子，下同。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
参见：https://ja.wikipedia.org/wiki/引用符#一覧&amp;#160;&amp;#x21a9;&amp;#xfe0e;
说明：当然，博主既非专业人士，也没有进行相应的考据。故博主的这个回答只是逻辑世界中的单纯分析，历史事实中的胡言乱语。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
说明：这也是一个「概念之困」。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>使用 GitHub Issues 持续写作</title>
      <link>https://pub.oribos.cn/web/reprint/2019120306.html</link>
      <pubDate>Tue, 03 Dec 2019 22:36:48 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/reprint/2019120306.html</guid>
      <description>引用自reuixiy
不知你是否会为写作而发愁？当你突然闪出一个好想法时，却没有写作的时间；当你坐在书桌前准备写作时，却只有空空的无奈。在此，我激动地向你介绍一种现代的写作方式——使用 GitHub Issues ..持续写作..！1
什么是 GitHub Issues 呢？GitHub 是全球著名的通过 Git 进行版本控制的软件源代码托管服务平台2，而 GitHub Issues 则是一种用来管理 GitHub 上的工作项目中的各种想法、改进、任务或漏洞的追踪方式，目前的官方中文译名为「议题」。
什么是持续写作呢？持续写作是一种通过对想法的持续追踪、持续构建来协助写作的写作方式，英文为 Continuous Writing，简写为 CW。这是一个我自创的术语，由现代软件开发中的 CI/CD 概念所激发。
因此，文题「使用 GitHub Issues 持续写作」可以理解为使用 GitHub 的议题来对你的想法进行持续追踪、持续构建，从而促进你的写作。这种方式的巧妙之处就在于将现代的软件开发模式直接借用于写作，从而成就现代的写作模式。
听起来可能会有点摸不着头脑，下面就以采用持续集成方式部署的博客为例，简单描述下这种现代的写作模式的具体流程：
Eureka！闪出新想法！ 去 GitHub 新建一个议题，标题为文章名，描述为想法内容或文章纲要3； 时间匆忙，暂时搁置； Eureka！闪现这个想法的另一方面！ 打开 GitHub 上的该议题，在底部添加一条评论补充； 重复 3、4、5； 整理成一篇文章并自动发布；自动关闭议题。 更棒的是，由于 GitHub 是一个网站，因此可以随时随地用手机编辑！这将会极大地促进并优质化写作，因为这利用了每一零碎时间，抓住了每一突发奇想，完善了文章的每一细节，进而解决了创作难的问题！以后我们出去溜达无聊时，就可以拿起手机，看看自己在 GitHub 上的议题列表，随时随地写作！相比于博客部署上的持续集成，这可以称为文章创作上的持续写作！现代的写作，也是持续化的！当你有了个想法，发个推特，可能就石沉大海了；但你新建个议题，就可以持续构建这个想法。这就避免了碎片化的知识，解决了现在流行的各种知识平台的弊端，深度化了知识，也许这可以称为 GitIdea。
而且，GitHub Issues 是完全支持再编辑的，并能看到每个历史版本，这就日志化了文章的写作全过程。还有，GitHub Issues 还支持标签，这意味着你可以分类组织你的所有想法；GitHub Issues 还支持固定，这意味着你可以置顶重要的想法；GitHub Issues 还支持引用，这意味着你可以联系不同想法；GitHub Issues 还支持任务列表，这意味着你可以管理文章的完成进度；GitHub Issues 还支持项目板，这意味着你可以制定你的写作计划；GitHub Issues 还支持里程碑，这意味着你可以监督自己的写作进度。因此，这难道不是一个现代且完善的写作管理系统吗？
还有，GitHub Issues 还是一个现代的笔记系统！除了支持手机方便编辑，除了上面所说的各种现代特点，它还支持 Markdown！读书笔记、课堂笔记、电影感悟……直接新建一个仓库，然后开始 Issue 即可！相比一条说说或一条朋友圈，这能够持续追踪你的各种记录，不仅避免了碎片化知识，甚至还可能汇聚成一个属于自己的体系！更重要的是，GitHub Issues 是基于网页的，这非常利于传播！想法的价值在于传播，使用 GitHub Issues，轻松方便地分享和传播你的想法！GitHub 的仓库还支持关注，且有邮件通知！此外，还可以使用 RSSHub 通过 RSS 来订阅 Issues！这意味着你完全可以新建一个仓库，然后将 GitHub Issues 当 Microblog 来用，什么朋友圈、空间、微博、推特、TG 频道都弱爆了！这是一种全新的记录方式！这是一种现代的记录方式！</description>
    </item>
    
  </channel>
</rss>
