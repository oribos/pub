<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on 记事本</title>
    <link>https://pub.oribos.cn/tags/web/</link>
    <description>Recent content in web on 记事本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©nierheim</copyright>
    <lastBuildDate>Wed, 19 Aug 2020 23:29:45 +0800</lastBuildDate><atom:link href="https://pub.oribos.cn/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一个简单的 Service Worker</title>
      <link>https://pub.oribos.cn/web/reprint/001.html</link>
      <pubDate>Wed, 19 Aug 2020 23:29:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/reprint/001.html</guid>
      <description>引用自reuixiy
1 2 3 4 5 6 7 8 9 &amp;lt;!-- HTML --&amp;gt; &amp;lt;script&amp;gt; if (&amp;#39;serviceWorker&amp;#39; in navigator) { window.addEventListener(&amp;#39;load&amp;#39;, function() { navigator.serviceWorker.register(&amp;#39;/sw.js&amp;#39;); }); } &amp;lt;/script&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // sw.js /** References: 1. https://developers.google.com/web/fundamentals/primers/service-workers 2.</description>
    </item>
    
    <item>
      <title>一个更自然原生的渐变顶栏</title>
      <link>https://pub.oribos.cn/web/reprint/2020030601.html</link>
      <pubDate>Fri, 06 Mar 2020 13:10:54 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/reprint/2020030601.html</guid>
      <description>引用自reuixiy
本博客的顶栏应该是两年多没动过了，一直都是上图中那闪眼的渐变彩带。这个渐变色的来源应该是..当年..的 GitHub Universe 网站1。当时年轻觉得新颖酷炫，现在老了只觉刺眼无味🤢。
刚好，前几天折腾可变字体的时候，Google 结果中无意浏览到这个简洁却细节的博客，被它顶栏的简洁和毛玻璃效果吸引了，又在它的「致谢」中发现了 3type，而其顶栏也使用了毛玻璃……想起之前在 Twitter 中常常刷到的毛玻璃，想起之前浏览过的其它博客中的毛玻璃，想起之前浏览过的 Apple 官网的毛玻璃……终于的终于，我决心要将毛玻璃应用到我的博客🤪！
正文 首先，渐变可以通过 CSS 的 linear-gradient() 函数实现，比如本博客之前的渐变，其 CSS 代码和效果如下：
1 background: linear-gradient(90deg, rgb(247, 149, 51) 0, rgb(243, 112, 85) 15%, rgb(239, 78, 123) 30%, rgb(161, 102, 171) 44%, rgb(80, 115, 184) 58%, rgb(16, 152, 173) 72%, rgb(7, 179, 155) 86%, rgb(109, 186, 130) 100%); 你会发现，这样的渐变其实是非常..不自然..的。以大自然中的彩虹为例，我们雨后看到的彩虹肯定不长上面那样，自然中的彩虹颜色肯定没有这么饱和，而且也应该要通透一点。
2
要实现这种更自然的渐变，我们在 CSS 中可以简单地通过设置颜色的 Alpha 值即透明度来实现，其 CSS 代码和效果如下：
1 background: linear-gradient(90deg, rgba(247, 149, 51, 0.</description>
    </item>
    
    <item>
      <title>简单实现 Google Fonts 的异步加载</title>
      <link>https://pub.oribos.cn/web/reprint/2020030501.html</link>
      <pubDate>Thu, 05 Mar 2020 21:22:26 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/reprint/2020030501.html</guid>
      <description>引用自reuixiy
在 Web 中，中文一般是不推荐使用网络字体的——因为汉字庞大的字符数让中文网络字体的体积异常庞大。但是，如果你经常浏览国外的英文网站，你会发现——使用了网络字体的网页是真的很美！所以，为何中文网页不能一样美呢？
技术进步带来的字体子集化和用户网络带宽的普遍提升，中文网页其实已经可以开始尝试网络字体了。不知你是否注意到，苹果的中文官网其实就已经在使用中文网络字体了。就在昨天1，Google Fonts 推出了全新的设计，以庆祝其 10 岁的生日，而其中一个重要的新亮点，就是添加了可变字体（Variable Fonts）的支持。
所以，中文网络字体的普及是刻不容缓的。这需要字体设计师的努力，也需要网页开发者的努力。作为开发者，尝试使用网络字体其实也是我们的一个职责——Making the Web Beautiful!
2
1 2 - &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; + &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34; media=&amp;#34;print&amp;#34; onload=&amp;#34;this.media=&amp;#39;all&amp;#39;&amp;#34;&amp;gt; 参考：
Defer non-critical CSS | web.dev Can I use &amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;? loadCSS | GitHub How to load CSS Asynchronously | Stack Overflow The Simplest Way to Load CSS Asynchronously | Filament Group, Inc. https://twitter.com/googlefonts/status/1234967000193150978&amp;#160;&amp;#x21a9;&amp;#xfe0e;
测试前需要前往 Network 将 Disable cache 勾选。&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>可变字体（Variable Fonts）尝鲜</title>
      <link>https://pub.oribos.cn/web/reprint/2020022901.html</link>
      <pubDate>Sat, 29 Feb 2020 22:00:19 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/reprint/2020022901.html</guid>
      <description>引用自reuixiy
最近在系统地学习 Web，在 MDN 的 CSS 学习区的 Web fonts 一节底部，看到 Variable Fonts 即「可变字体」一词，瞌睡之中突然来了点兴趣——因为之前间断地见过这个术语，前不久还在 Twitter 上刷到过好几次——于是我点开 Variable fonts guide，并马上被这个示例的字体和视觉效果吸引了，决定马上尝试一下。二话不说，CTRL + U 发现 Amstelvar VF 然后 Google 到 Amstelvar，先 Star 然后开始尝鲜可变字体！
前言 不过，可变字体其实已经不新鲜了，Google 结果中浏览到这篇 Get started with variable fonts，而此文的发布日期是 2017 年的 2 月份。但无论如何，可变字体对我来说还是新鲜的，而..尝试..一下也发现这是值得的——可变字体让人耳目一新。
⌛经过一番尝试，我已经将上文提到的 Amstelvar 这个开源的可变字体应用到了我的博客——你现在所见的本博客正文中的英文即是。下面，就来说说可变字体在 Web 上的食用方法😺。
正文 首先，我们去 GitHub 上下载 Amstelvar 字体，将 Amstelvar-Roman-VF.ttf 和其斜体 Amstelvar-Italic-VF.ttf 下载到本地。
然后，我们将 .ttf 压缩成既现代又节约的 .woff2，可以使用 ttf2woff2，或者你也可以尝试其它方法。
接下来，我们添加 CSS 代码，使用 @font-face 指定一下我们要使用的字体：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* https://github.</description>
    </item>
    
  </channel>
</rss>
