<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2020 on 记事本</title>
    <link>https://pub.oribos.cn/tech/develop/2020/</link>
    <description>Recent content in 2020 on 记事本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©nierheim</copyright>
    <lastBuildDate>Fri, 30 Apr 2021 11:55:45 +0800</lastBuildDate><atom:link href="https://pub.oribos.cn/tech/develop/2020/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>迁移asp.net项目</title>
      <link>https://pub.oribos.cn/web/note/2021/2021043001.html</link>
      <pubDate>Fri, 30 Apr 2021 11:55:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2021/2021043001.html</guid>
      <description>迁移asp.net项目 正常使用的CRM软件，部署在云服务器上，由于已经用了三年，当初打折价购买的服务器现在续费要一个月200元
步骤 安装环境 安装.net环境，iis，asp
安装sqlserver数据库
转移文件 关闭旧应用，将数据库文件转移到新服务器
将旧应用文件转移到新服务器
新建服务器站点
应用程序因程序配置 修改为.NET CLR V2.0.50727 托管管道模式 经典
启用32位应用程序：False
安装 ajax
配置sqlserver 连接数据库，新建应用登录用户名
启动应用 正式访问
问题 </description>
    </item>
    
    <item>
      <title>20210429</title>
      <link>https://pub.oribos.cn/web/note/2021/2021042901.html</link>
      <pubDate>Thu, 29 Apr 2021 11:55:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2021/2021042901.html</guid>
      <description>登录失败 以上错误均来自腾讯手机管家一款app
那么为什么要使用这样如此垃圾的app？还不是因为qq邮箱解绑英文名强制要求绑定这个垃圾app。
设计简陋的app 上传图片没有缩略图
阿里云手机app
强制要求 强制安全问题
强制学习步骤
莫名其妙的网络异常 文字和视频，app都可以打开，唯独个别软件的登录和读取信息出现缓存过久的情况。</description>
    </item>
    
    <item>
      <title>适用于萌新的hexo自动部署</title>
      <link>https://pub.oribos.cn/web/note/2021/2021041102.html</link>
      <pubDate>Sun, 11 Apr 2021 09:10:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2021/2021041102.html</guid>
      <description>适用于萌新的hexo自动部署 简述 下载本仓库代码，修改CNAME文件，添加自己的文章，将本仓库代码推送github
使用步骤 第一步 使用代码 git 下载coding仓库代码
git clone https://e.coding.net/frednab/dev/hexo-blog.git
第二步 修改配置 修改 source/CNAME文件里的域名
安装主题
方法一、下载主题目录，然后解压缩到themes目录下
方法二、使用npm安装主题
npm i hexo-theme-butterfly方式安装自己需要的主题（请参照自己需要主题的安装说明）
方法三、通过git submodule安装主题
git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly
其他文件不需要配置
第三步 更新文章 通过hexo new page 文章.md新建文档
或者在source/_posts目录下撰写自己的文章
第四步 将源码推送到github 通过一下命令将该仓库里的源码推送到github仓库
如果你是使用git clone方式下载的代码，建议删掉目录下的.git目录再执行如下操作
git init //初始化仓库。 git add . //添加文件到暂存区。(注意有点号.) git commit -m &amp;#34;更新说明&amp;#34; //将暂存区内容添加到仓库中。标识“更新说明” git remote add origin XXXX.git //添加到远程仓库操作，将xxxx.git设置为远程仓库origin git push -u origin master //推送master分支到origin仓库 提示操作成功后，代码将推送到github上的master分支，github自动部署将启动，将hexo文件自动部署到gh-pages分支
由于该仓库含有github自动构建文件，上传到github将触发自动部署
github自动构建文件为 .github/workflows/hexodeploy.yml文件</description>
    </item>
    
    <item>
      <title>https协议</title>
      <link>https://pub.oribos.cn/web/note/2020120317.html</link>
      <pubDate>Thu, 03 Dec 2020 10:20:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020120317.html</guid>
      <description>http&amp;amp;https协议 参考博客：
HTTP和HTTPS协议，看一篇就够了 什么是http 超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。
默认端口80， 如果 一台主机上有多个服务器呢? http报文格式 http的请求报文由：请求行、首部、空行、主体四个部分组成。 其中请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔 http通信流程 web客户端tcp连接到Web服务器-&amp;gt;发送Http请求-&amp;gt;服务器接受请求并返回HTTP响应-&amp;gt;释放连接TCP连接-&amp;gt;客户端浏览器解析HTML内容
graph TD A(web客户端tcp连接到Web服务器) --&amp;gt;B(发送Http请求) B --&amp;gt;C(服务器接受请求并返回HTTP响应) C--&amp;gt;D(释放连接TCP连接) D--&amp;gt;E(客户端浏览器解析HTML内容) 什么是https 图解HTTP》这本书中曾提过HTTPS是身披SSL外壳的HTTP。HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。HTTPS使用的主要目的是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。PS:TLS是传输层加密协议，前身是SSL协议，由网景公司1995年发布，有时候两者不区分。
成本考虑 SSL证书需要购买申请，功能越强大的证书费用越高 SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗（SSL有扩展可以部分解决这个问题，但是比较麻烦，而且要求浏览器、操作系统支持，Windows XP就不支持这个扩展，考虑到XP的装机量，这个特性几乎没用）。 根据ACM CoNEXT数据显示，使用HTTPS协议会使页面的加载时间延长近50%，增加10%到20%的耗电。 HTTPS连接缓存不如HTTP高效，流量成本高。 HTTPS连接服务器端资源占用高很多，支持访客多的网站需要投入更大的成本。 HTTPS协议握手阶段比较费时，对网站的响应速度有影响，影响用户体验。比较好的方式是采用分而治之，类似12306网站的主页使用HTTP协议，有关于用户信息等方面使用HTTPS。 </description>
    </item>
    
    <item>
      <title>前后端分离架构</title>
      <link>https://pub.oribos.cn/web/note/2020112873.html</link>
      <pubDate>Sat, 28 Nov 2020 09:55:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020112873.html</guid>
      <description> 引用自meloor
参考： 到底什么是前后端分离 1 到底什么是前后端分离 2 到底什么是前后端分离 3
前后端分离是个架构设计问题。所谓架构设计，实际上是如何合理的对现实的人力架构进行系统映射，以便最大限度的提高整个公司的运行效率。
前后端的定义 前后端定义，不应该是以语言来定义，而是应该以它的运行环境
Html+CSS+JS，都是在浏览器端执行，统一称之为前端。(用户能看到) Java，C，Python，PHP 这些在服务器端运行，统一称之为后端。(用户看不到） 前后端不分离 架构设计 交互方式 浏览器发请求，服务器端给出一个完整的网页，浏览器再发请求，服务器端再给出一个完整的网页 缺点 传输的重复数据比较多，网络又会有延迟。所以有没有办法，只传送必要的数据？这是 Ajax 的起源。
Ajax Ajax 就是只传递数据，不传递整个网页。这也是被用来在翻页，注册，发送验证码等场景，但也仅仅止布于此了。
前后端分离 架构设计 交互方式(通过浏览器测试) 页面跳转(浏览器地址栏 url 会变)时浏览器先发送请求给前端服务器 浏览器得到响应数据前端代码(html+css+js, 响应数据)并渲染。(地址栏输入后端服务器的 url 会直接显示 json 格式数据, 是 html 就会渲染) 渲染时会执行 js 代码，这时 js 代码向后端服务器发送请求得到数据并动态更新 html 元素得到最终页面。 区分前后端的原因 第一个，是可以并行开发。前后端的进度互不影响，在过去，前后端不分离的情况下，前端的工作量相对较少，一个前端可以对四个后端。
第二个，是成本问题。在过去，后端的成本还是比前端要高一些。同样的工作，如果能拆给两个人做，一个成本高一点，一个成本低一点，能接受。
第三个，CSS 太难了。JS 还好，和后端语言在对技能的训练上相差不大，可是。。CSS 是什么鬼？记住那么多的属性，和 Hash 算法有关系吗？
优点 前端人员和后端人员只需约定好接口，大大降低了前后端耦合性 前端人员彻底不用再关心业务处理是怎么回事，他只需要把界面做好就可以了 后端人员也不用再关系前端界面是什么样的，他只需要做好业务逻辑处理即可。 服务的切离，代码管理，服务部署也都独立出来分别管理，系统的灵活性也获得了极大的提升。 </description>
    </item>
    
    <item>
      <title>日记2020-11-18</title>
      <link>https://pub.oribos.cn/web/note/2020111808.html</link>
      <pubDate>Wed, 18 Nov 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020111808.html</guid>
      <description>同样的代码，不同的效果 在国内服务器上，由于以下内容的下载和安装问题，执行npm install会出现错误。
而同样的代码，在香港服务器上，执行npm install尽管依然需要下载，但速度相对快，也没有文件丢失或无法访问。</description>
    </item>
    
    <item>
      <title>日记2020-11-17</title>
      <link>https://pub.oribos.cn/web/note/2020111714html/</link>
      <pubDate>Tue, 17 Nov 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020111714html/</guid>
      <description>cloudflare的kv存储免费计划 Cloudflare Workers简单地说就是一个可以让你运行Javascript的平台，因为它免费，不需要域名，不需要维护服务器，在线率高。最简单的例子就是通过使用以下代码显示一个普通html页面
const html = `&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;This markup was generated by a Cloudflare Worker.&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt;` async function handleRequest(request) { return new Response(html, { headers: { &amp;#34;content-type&amp;#34;: &amp;#34;text/html;charset=UTF-8&amp;#34;, }, }) } addEventListener(&amp;#34;fetch&amp;#34;, event =&amp;gt; { return event.respondWith(handleRequest(event.request)) }) 其他使用workers的方法可以通过Examples 获得。
workers有免费计划，包括 100,000 个请求/天 。然后令人意外的是，cloudflare也将kv存储加入免费计划（之前使用kv存储需要5美元/月)。这样workers可以做的事情就多了。
比如使用workers不但可以部署一个静态页面，还能部署一个静态网站。
wrangler npm安装wrangler
npm i @cloudflare/wrangler -g 然后使用wrangler login 登录，wrangler config配置api-key，通过wrangler publish部署
通过教程进一步了解使用wrangler</description>
    </item>
    
    <item>
      <title>日记20201115</title>
      <link>https://pub.oribos.cn/web/note/2020111305.html</link>
      <pubDate>Sun, 15 Nov 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020111305.html</guid>
      <description>使用gatsby错误提示 原本在hugo使用的html代码，在gatsby上并不识别，导致出现错误提示。但问题是这是数百个旧文件中的一个，可以识别的md文档先渲染出来显示，不能识别的md文档不显示不就可以了。如此到每个错误就停下来，不进行渲染部署。那我需要将hugo的数百个文章转而使用gatsby生成，需要多长时间？
由于过于繁多的不兼容，识别问题，阻碍了使用gatsby。导致想变换静态部署工具的想法无法实现。
gatsby的博客模板 没有配置分页，由于gatsby的配置过于复杂，而且对于主题的支持并没有使用完善的git子模块，导致主题更新复杂。</description>
    </item>
    
    <item>
      <title>腾讯云函数计算备案</title>
      <link>https://pub.oribos.cn/web/note/2020111005.html</link>
      <pubDate>Tue, 10 Nov 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020111005.html</guid>
      <description>云开发域名备案服务 腾讯云上使用云函数，需要申请备案，备案本身并没有问题，但是在云函数上没有固定的服务器和ip，就无法安装一般的云服务器申请备案。事实上，在其他平台上申请的备案本应该完全可以在腾讯云上使用，只要你在腾讯云上接入备案。奈何云函数的特殊性，没有服务器和ip无从接入备案。
如果按照规定，正常在腾讯云上使用云函数的话，你需要在腾讯云上购买云服务器。然后通过服务器，接入备案。而如果你只是使用腾讯云的云函数的，就会需要一个空壳的云服务器提供备案申请。当然，你可以使用备案授权码而使用其他用户的服务器，但是2019年10月20日起，仅企业实名认证的腾讯云账号可生成备案授权码。
如此麻烦，腾讯云“人性化”的提供了
即：提供一个环境和ip方便用户备案。
其实 早期的云函数是可以使用已经备案的域名的，后来腾讯云撤销了未在腾讯云上接入备案的域名访问云函数，然后不久提供了专用的云函数备案付费服务。即，通过政策赚钱。</description>
    </item>
    
    <item>
      <title>wordpress测试</title>
      <link>https://pub.oribos.cn/web/pro/test/2020110502.html</link>
      <pubDate>Thu, 05 Nov 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/pro/test/2020110502.html</guid>
      <description>问题 发现wordpress的css和js文件并不全部会自动设置为https，由于wordpress是服务端渲染，页面效果应环境而出现不同。导致设置了https://app.holz.pub，页面显示仍然引用的http
如下图
导致页面效果出现问题。
而另一方面，wordpress自带的编辑器并不能很好的解决css和js文件的配置，导致此处配置必须修改主题文件。
结论 wordpress 糟糕的前端页面编辑器（或者说wordpress作为服务端渲染应用，前端页面根本不重要），在后台配置里即便设置了站点为https，仍然不会完全生效。</description>
    </item>
    
    <item>
      <title>相册</title>
      <link>https://pub.oribos.cn/web/note/2020110101.html</link>
      <pubDate>Sun, 01 Nov 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020110101.html</guid>
      <description>创建了一个展示相册 相册站点 ，用来集中展示分享的图片。
子站点 项目的部署站点在 /photo ，即博客的子目录里，尽管使用的主题完全跟blog主题不一样。用子目录可以使得站点内容集中在一个域名下。原本使用photo.holz.pub域名，但是考虑到cdn，文件存放等等需要更多的设置，还是不如子目录方便。
后续新增友链，其他内容也会使用子目录的形式集中部署在blog.oribos.cn之下。(2020-11-20变更:由blog.holz.pub变更为blog.oribos.cn)</description>
    </item>
    
    <item>
      <title>收敛型和发散型知识</title>
      <link>https://pub.oribos.cn/web/note/2020102701.html</link>
      <pubDate>Tue, 27 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020102701.html</guid>
      <description>知识的收敛和发散 “收敛型知识” 收敛 是指会聚于一点，向某一值靠近。
“收敛型知识” 表现在越来越集中到某一些内容，某一部或几部著作。将某些内容视为最终的，全知全能的知识，解开宇宙万事万物奥秘的钥匙。
收敛型知识在起初会出现多种表现，他们的理论和依据在他们自身的性质决定下，集中成唯一的目标。这个唯一的目标可能是一本书，也可能是一个人，也可能是传说。
“发散型知识” “发散型知识”表现在越来越广泛，复杂。对某一个点的研究就能开拓出许多未知的课题。对课题的研究越来越复杂，内容越来越多。无法使用一个或有限个内容来解答所有问题。甚至出现相互矛盾，互相不相容的情况。
发散型知识在起初体现在一个简单的现象，基于理论之下会将此现象分析成多种因素，对不同因素的研究又能探索出更多内容，周而复始。</description>
    </item>
    
    <item>
      <title>记录hugo配置</title>
      <link>https://pub.oribos.cn/web/note/2020102705.html</link>
      <pubDate>Tue, 27 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020102705.html</guid>
      <description>日记 使用config.yml的publishDir自定义hugo生成的目录
使用baseURL = &amp;quot;/dir/&amp;quot;修改网页使用的根目录</description>
    </item>
    
    <item>
      <title>萌新专用hexo教程.</title>
      <link>https://pub.oribos.cn/web/note/2020102117.html</link>
      <pubDate>Wed, 21 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020102117.html</guid>
      <description>萌新专用hexo教程 介绍
适用于萌新的hexo自动部署 使用步骤 第一步 使用代码 git 下载github上的源码
git clone https://github.com/denalon/product.git
也可以使用coding仓库
git clone https://e.coding.net/frednab/test/product.git
第二步 修改配置 修改 项目目录下的CNAME文件里的域名
原文使用butterfly,你可以通过hexo 5.0之后的新的安装主题方式使用
npm i hexo-theme-butterfly方式安装自己需要的主题（请参照自己需要主题的安装说明）
其他文件不需要配置
第三步 更新文章 撰写自己的文章
第四步 git推送到github 通过一下命令将代码推送到github仓库
如果你是使用git clone方式下载的代码，建议删掉目录下的.git目录再执行如下操作
git init //初始化仓库。 git add . //添加文件到暂存区。(注意有点号.) git commit -m &amp;#34;更新说明&amp;#34; //将暂存区内容添加到仓库中。标识“更新说明” git remote add origin XXXX.git //添加到远程仓库操作，将xxxx.git设置为远程仓库origin git push -u origin master //推送master分支到origin仓库 提示操作成功后，代码将推送到github上的master分支，github自动部署将启动，将hexo文件自动部署到gh-pages分支
第五步 开启pages 在github仓库 “Settings”选择“GitHub Pages” source项选择Branch:gh-pages 如图：
即可使用由github自动部署的 pages 服务。
以下是需要用到的内容
nodejs安装 ubuntu Installation instructions Node.</description>
    </item>
    
    <item>
      <title>博客变更历程</title>
      <link>https://pub.oribos.cn/web/note/2020101303.html</link>
      <pubDate>Tue, 13 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020101303.html</guid>
      <description>博客变更 记录博客部署的过程</description>
    </item>
    
    <item>
      <title>引用文件</title>
      <link>https://pub.oribos.cn/web/note/2020101217.html</link>
      <pubDate>Mon, 12 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020101217.html</guid>
      <description>连续更新的内容 使用https://github.com/Rheaheim/content的内容作为日常引用文件，一些临时撰写的文章会上传到github，生成https://content.uns.pub/的页面。并根据需要引入到博客页面。
使用代码： &amp;lt;div class=&amp;#34;left&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;div1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; $(&amp;#34;#div1&amp;#34;).load(&amp;#34;https://content.uns.pub/test/1.html&amp;#34;); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>nodejs和git安装</title>
      <link>https://pub.oribos.cn/web/note/2020/20201011.html</link>
      <pubDate>Sun, 11 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/20201011.html</guid>
      <description>nodejs安装 ubuntu Installation instructions Node.js v15.x: # Using Ubuntu curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash - sudo apt-get install -y nodejs # Using Debian, as root curl -sL https://deb.nodesource.com/setup_15.x | bash - apt-get install -y nodejs Node.js v14.x: # Using Ubuntu curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs # Using Debian, as root curl -sL https://deb.nodesource.com/setup_14.x | bash - apt-get install -y nodejs Node.</description>
    </item>
    
    <item>
      <title>连续更新的内容</title>
      <link>https://pub.oribos.cn/web/note/2020101000.html</link>
      <pubDate>Sat, 10 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020101000.html</guid>
      <description>连续更新的内容 连续更新，内容引用github</description>
    </item>
    
    <item>
      <title>博客撤销后端服务</title>
      <link>https://pub.oribos.cn/web/note/2020100813.html</link>
      <pubDate>Thu, 08 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020100813.html</guid>
      <description>撤销后端服务 撤销了测试用的halo ghost等服务端渲染应用
关闭所有使用php的服务端渲染站点,包括测试用的wordpress,typecho.和函数计算上的php应用.
博客和单页摒弃web服务器 用来记录和展示日常文章的博客,将不再部署在云服务器,物理服务器,树莓派,NAS上.将以hugo生成html托管在静态站点上或者对象存储服务上.简单的js或功能性页面将在cf的worker或者对象存储上使用.
关闭个人云服务器的web服务,关闭个人功能的后端服务.
文章以文件形式部署 博客的文章更新以文章的形式保存在git托管上,博客的项目托管在github或coding上,通过定时运行部署,或者api触发 .
说明 由于部署一个前后端分离的应用需要前端服务器和后端服务器同时持续运行,虽然前端服务可以托管在静态服务上,但需要考虑静态服务的托管费用和流量问题.还要关注后端服务的持续运行和维护.这些在项目运行中是有必要的,但博客的作用有限.投入过多的资源并不明智.
采用git托管和静态页面部署,配置简单的自动部署和cdn,维持一个长期的网页在线.其他的服务器运行和维护不需要担心.这是必要的.
不采用落后的wordpress,typecho等应用,不采用java,python,go项目的服务端渲染应用.一个简单长期的博客,应当尽可能的结构简单,稳定运行.
测试项目另外部署 之前的博客作用是用来测试项目代码的效果,现在博客作为一个长期维护的项目,就不再作为一个临时的测试的运行状态.所以,不必要的内容应当被剥离.
用来测试的项目将另外安排域名和服务器,使博客尽可能不受干扰 .</description>
    </item>
    
    <item>
      <title>hexo安装步骤</title>
      <link>https://pub.oribos.cn/web/note/2020/20201005.html</link>
      <pubDate>Mon, 05 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/20201005.html</guid>
      <description>hexo安装步骤 在客户端运行和推送
安装nodejs 安装git 安装hexo 配置文件 发布 hexo d
在服务器上运行和部署
推荐安装宝塔面板 安装nodejs 根据需求安装git 由于是在服务器上安装，就不需要使用git和github代码托管，就没必要安装git。当然使用github托管代码有助于保留源代码，推荐使用。
安装hexo 配置文件 发布 hexo g</description>
    </item>
    
    <item>
      <title>中文域名的尴尬</title>
      <link>https://pub.oribos.cn/web/note/2020100573.html</link>
      <pubDate>Mon, 05 Oct 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020100573.html</guid>
      <description>中文域名 类似于 域名.信息 的中文域名,看似符合中国文字的习惯,但是域名url的符号&amp;quot;.&amp;ldquo;是英文符号,导致使用中文输入法输入 域名.信息 时需要输入 中文符号&amp;quot;域名&amp;rdquo;+英文符号&amp;quot;.&amp;quot;+中文符号&amp;quot;信息&amp;quot;,一个简单的域名需要切换至少两次输入法.
这种复杂的输入方式导致中文域名的使用难度比英文域名高.在英文域名中,一个字符的差别就会使得域名价格翻十几甚至几十倍价格.中文域名如此尴尬的使用方法实则推广难度大.
中文的符号 不知道何时,中文排版需要自创 全角符号 ，。代替 . , 等符号。导致在电脑操作上，两者具有较大不同。</description>
    </item>
    
    <item>
      <title>docker安装宝塔面板</title>
      <link>https://pub.oribos.cn/web/note/2020093073.html</link>
      <pubDate>Wed, 30 Sep 2020 11:09:33 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020093073.html</guid>
      <description>在使用docker安装宝塔面板之前请先确保服务器已经安装并开启了docker
拉取centos基础镜像，用容器启动该基础镜像，直接在这个容器中部署
1.拉取纯净系统镜像
$ docker pull centos:7.2.1511 1 2.启动镜像，映射主机与容器内8888（宝塔面板）、888（PHPMYADMIN）端口
$ docker run -d -it -p 8888:8888 -p 888:888 centos:7.2.1511 1 可以同时映射进去其它常用端口比如：80、443、3306等
$ docker run -d -it -p 8888:8888 -p 888:888 -p 80:80 -p 443:443 -p 3306:3306 centos:7.2.1511 1 挂载目录
$ docker run -d -it -p 8888:8888 -p 888:888 -p 80:80 -p 443:443 -p 3306:3306 -v /www:/www &amp;ndash;privileged=true centos:7.2.1511 1 3.查看容器id，并进入容器
$ docker ps 1 $ docker exec -it 容器ID bash 1 4.</description>
    </item>
    
    <item>
      <title>使用docker运行hugo</title>
      <link>https://pub.oribos.cn/web/note/2020092313.html</link>
      <pubDate>Wed, 23 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020092313.html</guid>
      <description>使用docker运行hugo docker run &amp;ndash;rm -t -v $(pwd):/src klakegg/hugo:0.74.3-ext-ubuntu</description>
    </item>
    
    <item>
      <title>信息拆分</title>
      <link>https://pub.oribos.cn/web/note/2020091919.html</link>
      <pubDate>Sat, 19 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091919.html</guid>
      <description>口令 对文件设置访问口令，口令正确才能访问
字典 为了避免信息泄露需要将信息拆分，混淆
作用特殊的文件夹名称: *7*DA-0001A*7* 7DA-0001A7 指某一个名称，该名称为保密内容
7 只是其中一个特殊标记，DA指序号
混淆 *7*DA-0001A*7**7*DA-0001B*7**7*DA-0001A*7* 加密信息被无意义的内容填充，或者多个加密信息，只有特定的一个为真
信息拆分 一个完整的信息被拆分成多个文件，只有这些文件全部集齐才能得到完整信息</description>
    </item>
    
    <item>
      <title>概念</title>
      <link>https://pub.oribos.cn/web/note/2020091913.html</link>
      <pubDate>Sat, 19 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091913.html</guid>
      <description>概念 概念（Idea；Notion；Concept）是人类在认识过程中，从感性认识上升到理性认识，把所感知的事物的共同本质特点抽象出来，加以概括，是自我认知意识的一种表达，形成概念式思维惯性。在人类所认知的思维体系中最基本的构筑单位 心理学上认为，概念是人脑对客观事物本质的反映，这种反映是以词来标示和记载的。概念是思维活动的结果和产物，同时又是思维活动借以进行的单元。 个人理解 物质是真实存在的，概念是虚拟的，抽象的。 唯物主义和唯心主义的不同就是概念的抽象和物质的真实的差别 </description>
    </item>
    
    <item>
      <title>网站分拆</title>
      <link>https://pub.oribos.cn/web/note/2020091907.html</link>
      <pubDate>Sat, 19 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091907.html</guid>
      <description>问题 由于网站在coding构建计划推送阿里云oss，同时期望找到到一个可靠的静态托管服务避免不必要的付费。出现以下两个矛盾：
1 使用github pages和vercel时会出现下载国内的内容缓慢(子模块中引用coding的git仓库)。
2 在coding构建计划中使用npm时出现网络错误，自动部署失败。
原因： 在国内使用npm和git速度是相当慢，且经常遇到无法下载而停滞的情况。而国内并没有一个完全有效代替npm和git的工具。这就导致在网站项目里使用npm install时，所使用的hugo-bin需要单独从其他地方下载文件时发生网络错误卡住。
解决方法 在国内项目中使用blog仓库，使用的服务和内容均引用国内仓库地址。去除npm命令和项目依赖。在海外项目使用note仓库，使用的服务和内容引用github，bitbucket仓库地址。使用npm命令。
其他 使用npm可以简化程序代码，使用统一的包管理器。而由于国内糟糕的网络状况。这种方便的形式无法正常使用。且没有一个合适的代替方法。只能添加繁琐复杂的代码，并自行维护。cnpm仅提供基础的缓存，在npm rimraf vendor &amp;amp;&amp;amp; node lib/install运行时依然出现网络问题。</description>
    </item>
    
    <item>
      <title>从零搭建Spring Boot的Hello World</title>
      <link>https://pub.oribos.cn/web/note/2020091801.html</link>
      <pubDate>Fri, 18 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091801.html</guid>
      <description>从零搭建Spring Boot的Hello World 安装Java开发环境 下载并安装JDK8，下载地址参见Java SE 8u261 。
配置Java环境变量。
a. 打开命令窗口，执行以下命令。
说明：执行命令前，请修改JAVA_HOME参数C:\Program Files\Java\jdk1.8.0_211为您的JDK安装目录。
``` setx JAVA_HOME &amp;quot;C:\Program Files\Java\jdk1.8.0_211&amp;quot; setx path &amp;quot;%path%;%JAVA_HOME%\bin&amp;quot; ``` b.执行以下命令，验证环境变量配置是否成功。 ``` java -version ``` 安装并配置IntelliJ IDEA 此步骤主要介绍使用IntelliJ IDEA安装Spring Assistant插件。
下载并安装IntelliJ IDEA，下载地址参见 IntelliJ IDEA 。
双击运行IntelliJ IDEA。
在IntelliJ IDEA启动界面，依次单击 Configure &amp;gt; Settings 。
单击 Plugins，然后在搜索栏输入spring Assistant。最后单击 Install 安装插件。 单击 Restart IDE。 创建Spring Boot项目 本步骤主要介绍使用Spring Assistant插件来搭建简单的Spring Boot项目。
在IntelliJ IDEA启动界面，单击 Create New Project。
在左侧单击 Spring Assistant，然后单击 Next。
如下图所示，依次配置Group Id、Artifact Id、Packaging等，然后单击 Next。 在左侧单击 Web，然后勾选 Spring Web，最后单击Next。 单击 Finish，等待项目初始化。 完整的目录结构如下。</description>
    </item>
    
    <item>
      <title>本地博客</title>
      <link>https://pub.oribos.cn/web/note/2020091871.html</link>
      <pubDate>Fri, 18 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091871.html</guid>
      <description>本地环境的博客 由于hexo和hugo等静态工具是按照文件形式存放文章，可以用hexo搭建私有个人博客，仅供个人日常日记和图片整理。不对外访问。</description>
    </item>
    
    <item>
      <title>缘起性空</title>
      <link>https://pub.oribos.cn/web/note/2020091607.html</link>
      <pubDate>Wed, 16 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091607.html</guid>
      <description>缘起性空 缘起性空是佛教用语。所谓“缘起”，就是说：世间上没有独存性的东西，也没有常住不变的东西，一切都是因缘和合所生起。所谓“性空”，就是说：因缘和合所生起的假有，本性是空的；如果自性不空，则不能有，这就是“真空生妙有”的意义。
缘起论是佛法中的概念。缘起论认为世间上的事事物物(一切有为法)非凭空而有，不能单独存在，必须依靠种种因缘条件和合才能成立，一旦组成的因缘散失，事物本身也就归于乌有，「 诸法因缘生，诸法因缘灭 」的因果定律，称之为「 缘起 」。
定义 要明白佛教的义理，就必须从缘起论开始。缘起，是宇宙人生本来的、必然的、普遍的存在，所谓「若佛出世，若未出世，此法常住，法住法界。」当初佛陀在菩提树下金刚座上，因为现观缘起而成佛。「缘起」并非佛陀所「创造」，佛陀只是「发现」了「缘起」这个自然的法则，再将此宇宙人生的真理对众生宣说、开示。 《中阿含经》云「若此有则彼有，若此生则彼生，若此无则彼无，若此灭则彼灭」，这是对缘起的定义。 缘起，就是说一切诸法都是由于因缘而生起的。简单地说，就是世界上一切事物、现象的生起都是相对的，都是互相存在的关系和条件。如果没有这个关系和条件，任何事物和现象都无法生起。
因、缘、果 缘起论包括因和缘两个部分。因即因素，缘即条件，其中因是主要的，缘是辅助的。因缘聚则生，因缘散则灭。 一切法的生灭既由因缘，那么一切法存在或坏灭也就有因可循、有理可据。凡果必有因，怎样的因便产生怎样的果，因果必相应。 世间一切有为法皆无独立性、恒常性，必须靠「因」、「缘」和合才有「果」。「缘起」法所阐述的，就是因、缘、果的关系，因、缘、果三者是相依相待而存在，没有绝对的独立性。
个人理解 物质是客观存在的，一个存在本身是确定的，不依赖于其他的决定。
比如一个人有许多身份，是学生，是父母，是领导。这些概念和身份只是这个人的客观存在的一些标签，标签可多可少，可加可减。但人的客观存在并没有发生客观上的变化。一个人成为学生和父母，自己的客观存在并没有发生变化。婴儿出生，一个就成为父亲。但这个人可以不用等婴儿出生，认另一个婴儿为“干儿子”他同样成为父亲。另一种婴儿出生之后，这个父亲不知道或者不承认，那么“父亲”这个概念是否影响到这个人的“因缘”？
一杯水，尽管水由氢和氧原子构建，但氢和氧生成水以后，氢和氧就不能决定水的存在了，除非电能来破坏水的结构生成氢气和氧气。
即：关系，缘分，规则只是来描述客观存在的一种形式和概念，不是决定客观存在的行为。
理论是人们人类世界的工具 由于人类的局限性，认识世界并不是全面的和完整的。人类使用的认识工具也必然存在片面，矛盾的。这是由人类本身的局限决定。如果一种方式是全知全能的，那必然不是人类能接受的。视图用有限的理论描述整个世界和解释所有问题是徒劳的。
客观世界的存在必然是确定的，对客观事物的描述也只是赋予的概念，并没有改变客观事物的本质。客观事物的存在不依赖于概念和理论。改变和消灭客观事物必须引起能量和物质的改变。
唯物主义 物质是客观实在的哲学范畴，这种客观实在是人通过感知的，不依赖于我们的感觉而存在，为我们的感觉所复写、摄影、反映。</description>
    </item>
    
    <item>
      <title>heroku</title>
      <link>https://pub.oribos.cn/web/note/2020091521.html</link>
      <pubDate>Tue, 15 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091521.html</guid>
      <description>Heroku 免費版，竟然也可架設 WordPress heroku 上使用wordpress 免费使用heroku的php空间和数据库
步骤 安装heroku CLI 参考地址The Heroku CLI
npm install -g heroku 由于在服务器上无法打开浏览器，可以使用账户密码登录，登录命令如下：
heroku login -i 创建wordpress项目 创建一个项目 example
使用一个add-ons，选择JawsDB MySQ
获得数据库的地址和用户名
下载wordpress
通过heroku cli 部署项目
$ heroku git:clone -a example $ cd example 将wordpress的文件复制到example文件夹下
修改wp-config.php里的数据库连接地址和用户名密码
部署到heroku $ git add . $ git commit -am &amp;#34;make it better&amp;#34; $ git push heroku master heroku cli将项目部署到heroku
完成 添加域名解析
访问网址</description>
    </item>
    
    <item>
      <title>learn-termux</title>
      <link>https://pub.oribos.cn/web/note/2020091511.html</link>
      <pubDate>Tue, 15 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091511.html</guid>
      <description>learn-termux learn-termux 前言 第一章 一切歧途，自此而始 ## 1.1 termux的下载与安装 #### 1.2 颜值是第一生产力 #### 1.3 简单操作 1.4 简单易懂的ZSH配置方法 第二章 写作与同步 2.1 vim 和 emacs 2.2 git和github 2.3 geeknote 第三章 进阶玩法 RE:从零开始的 termux 学习生活
前言 Termux 是一款强大的安卓终端模拟 APP，无需 root 直接启动，自动安装最小化 linux 系统，使用 APT 作为包管理工具并提供各种各样的软件包。 高级终端 Termux 组合了强大的终端模拟和拓展 Linux 包收集支持。
• 享受bash 和 zsh。
• 使用nano 和 vim编辑文件。
• 通过ssh访问服务器。
• 使用gcc和clang编译代码。
• 使用python控制台来作为口袋计算器。
• 使用git 和 subversion检查项目。
• 使用frotz运行基于文本的游戏。
官方网站
这个应用真的很有意思，不过对于新手而言不太友好。比如说我，可以说是完全从零开始学习相关的知识。在这里就把我折腾这个应用的经历写一写，做一个学习笔记吧。
目前我的水平是能够简单地使用这个软件，并使用它做一些简单的操作。比如说我的这篇文章就完全是在termux里完成、修改和上传的。那么我以一个萌新的身份来讲讲 termux 的一些基础使用以及用 termux 写文章的方法。顺带一提我现在对这个应用的理解依然不够深，之后还会不断地进行补充和修改。</description>
    </item>
    
    <item>
      <title>hexo自动部署</title>
      <link>https://pub.oribos.cn/web/note/2020091431.html</link>
      <pubDate>Mon, 14 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091431.html</guid>
      <description>测试 hexo自动部署代码
name: github pages on: push: branches: - master # Set a branch to deploy jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 with: submodules: recursive # Fetch the Docsy theme fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Node uses: actions/setup-node@v1 with: node-version: &amp;#39;12.x&amp;#39; - name: Cache dependencies uses: actions/cache@v1 with: path: ~/.npm key: ${{ runner.os }}-node-${{ hashFiles(&amp;#39;**/package-lock.json&amp;#39;) }} restore-keys: | ${{ runner.os }}-node- - run: npm ci - run: hexo g - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.</description>
    </item>
    
    <item>
      <title>hugo自动部署</title>
      <link>https://pub.oribos.cn/web/note/2020091417.html</link>
      <pubDate>Mon, 14 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091417.html</guid>
      <description>.travis.yml上的配置文件 language: go # Specify which branches to build using a safelist # 分支白名单限制: 只有hugo分支的提交才会触发构建 branches: only: - master # install: # # 安装最新的hugo # - go get github.com/spf13/hugo install: - uname -a - wget https://github.com/gohugoio/hugo/releases/download/v0.74.3/hugo_extended_0.74.3_Linux-64bit.deb - sudo dpkg -i hugo*.deb - hugo version - ls - pwd script: # 运行hugo命令 - hugo deploy: provider: pages # 重要，指定这是一份github pages的部署配置 skip-cleanup: true # 重要，不能省略 local-dir: public # 静态站点文件所在目录 target-branch: gh-pages # 要将静态站点文件发布到哪个分支 github-token: $GH_TOKEN # 重要，$GITHUB_TOKEN是变量，需要在GitHub上申请、再到配置到Travis #fqdn: blog.</description>
    </item>
    
    <item>
      <title>资源分离</title>
      <link>https://pub.oribos.cn/web/note/2020091303.html</link>
      <pubDate>Sun, 13 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020091303.html</guid>
      <description>仅向github推送源码 许多人使用hexo,hugo等静态页面生成工具,最会将生成的public文件或者dist推送到github上,属于较落后的方式.
将源码推送到github,听过github actions或者travis ci或其他持续集成方式,自动运行源码文件,将public生成并自动发布到gh-pages分支上是推荐的方式.也可以使用netlify,vercel,aws amplify等静态托管服务,自动部署静态页面.</description>
    </item>
    
    <item>
      <title>github</title>
      <link>https://pub.oribos.cn/web/note/2020090807.html</link>
      <pubDate>Tue, 08 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090807.html</guid>
      <description>github 部署在github上的构建计划配置代码
name: Build Hugo on: push: branches: [ hugo ] jobs: build: name: Build runs-on: ubuntu-latest steps: - name: Check out code uses: actions/checkout@master - name: upload sub run: | git submodule init git submodule update - name: Build Hugo uses: lowply/build-hugo@v0.74.1 - name: Deploy to GitHub Pages if: success() uses: crazy-max/ghaction-github-pages@v2 with: target_branch: gh-pages build_dir: deploy/public env: GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} </description>
    </item>
    
    <item>
      <title>Travis CI</title>
      <link>https://pub.oribos.cn/web/note/2020090803.html</link>
      <pubDate>Tue, 08 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090803.html</guid>
      <description>Travis CI language: go # Specify which branches to build using a safelist # 分支白名单限制: 只有hugo分支的提交才会触发构建 branches: only: - hugo # install: # # 安装最新的hugo # - go get github.com/spf13/hugo install: - uname -a - wget https://github.com/gohugoio/hugo/releases/download/v0.74.3/hugo_extended_0.74.3_Linux-64bit.deb - sudo dpkg -i hugo*.deb - hugo version - ls - pwd script: # 运行hugo命令 - hugo deploy: provider: pages # 重要，指定这是一份github pages的部署配置 skip-cleanup: true # 重要，不能省略 local-dir: deploy/public # 静态站点文件所在目录 target-branch: gh-pages # 要将静态站点文件发布到哪个分支 github-token: $GH_TOKEN # 重要，$GITHUB_TOKEN是变量，需要在GitHub上申请、再到配置到Travis #fqdn: blog.</description>
    </item>
    
    <item>
      <title>360安全卫士</title>
      <link>https://pub.oribos.cn/web/note/2020090773.html</link>
      <pubDate>Mon, 07 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090773.html</guid>
      <description>臃肿的“安全软件” 用360就是为了在电脑运行出现问题时扫描木马病毒和恶意软件。结果360自己做的臃肿庞大，安装程序一直提示即将完成，运行程序需要安装各类插件，开始扫描半天一直进行所谓的优化修复，稍有些组件不正常就无法运行。
自身无法运行，真正的木马病毒不能第一时间清除，只是在不同安装全家桶，优化清理。
有问题的不能第一时间处理。而是不停的进行常规扫描
为什么使用360安全卫士 尽管360安全卫士臃肿缓慢，但必要的时候还是需要这种可以快速扫描隐藏的木马，恶意应用的安全软件。通过360安全卫士，清理掉这些较难清理的应用，然后再将360安全卫士卸载即可。
由于360不断推出插件，全家桶，不建议长期使用360安全卫士。</description>
    </item>
    
    <item>
      <title>0906归纳</title>
      <link>https://pub.oribos.cn/web/note/2020090673.html</link>
      <pubDate>Sun, 06 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090673.html</guid>
      <description>阴谋论 相信阴谋论，怀疑意味着能力欠缺。不确定地球是不是圆的，不确定美国有没有登月，不知道苏美尔文明来源，因为这些阴谋论者没能力飞向太空，穿越回古代。
对于远古时期，史前时期，遥远的地方，漫长的时间这些超出人类控制的内容，既要有所怀疑又需要有所相信。无论是否相信是陨石造成的恐龙灭绝，恐龙已经消失不见，没有能力挽回。古代文明已经消散，准确找到何年何月并没有实际意义。直立人智人的联系，人类起源无论是否完全研究出来，对当前的人类并没有多大影响。人类不缺真相。
知识阶级 富有阶层可以有时间学习艺术，哲学，文化，考古，经济，政治。而穷人只能学赚钱，打工，出力，技能。并非某学科“无用“而是是否能为自己提供有“有价值” “有意义”的成果。
设身处地 设身处地，换位思考，为他人着想，听上去很有道理。但人是有局限性的，根本不能完全互换位置，不同的环境不同的条件造就了不同的行为和决定。
人不轻身经历，身入其境某些事情，根本理解不了很多东西。所以要多万卷书，行万里路。
神明 敬神而不信神
神意味着未知的，远超自身理解的东西。对待未知我们要保持敬畏，恐惧。但不能受此影响。因为接触不到，认识不到才是未知，一旦接触到，看到听到那他就是必然的存在，就不再是未知。
未知就是不可知，知道了就不是不可知了，就应该研究知道的里面的不可知情况。神明最好就是永远不为人知，因为一旦神明现身，那就要思考，谁创造了“这个“神明？（神明未现身时“这个“就无法用来描述）
生命 无论人类是不是从低级生命演化而来，宇宙生命体必然是从无到有，由简到繁。一个固定的环境却存在各式各样生命体，这必然不是一蹴而就的。加入将整套地球生态采用一定样本完全丢到一个固定环境的星球，那么，必然会存在大型动植物或特殊生命体因为环境变化而灭绝。这是正常的，把南极的企鹅放到非洲必然会影响生存，同理把非洲的大象丢到南极也如此。也就是说，一个固定环境下，适应性强的物种生存和繁衍下来。
这意味着，假如上帝创造了世界，那上帝必然是创造了简单的结构，这些简单结构慢慢发展，演化，逐渐变成复杂的。如果上帝直接将全套现有的生态系统扔到世间。那么最开始必然存在大量不适应的情况导致大范围灭绝。</description>
    </item>
    
    <item>
      <title>神秘代码</title>
      <link>https://pub.oribos.cn/web/note/2020090611.html</link>
      <pubDate>Sun, 06 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090611.html</guid>
      <description>神秘代码 阿阿 阿巴阿阿 巴巴巴 阿阿阿巴 阿 巴阿巴阿 阿阿阿阿 阿阿 巴阿 阿巴
有人常识将它翻译成以下文字↓
.. .-.. &amp;mdash; &amp;hellip;- . -.-. &amp;hellip;. .. -. .-</description>
    </item>
    
    <item>
      <title>hugo主题配置</title>
      <link>https://pub.oribos.cn/web/note/2020090343.html</link>
      <pubDate>Thu, 03 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090343.html</guid>
      <description>安装基础程序 确保以下应用安装完毕： git
hugo 扩展版最佳
新建项目 使用hugo new site example example为自己的项目名称
进入项目目录cd ecample可以看到以下文件 进入themes目录，执行git clone https://github.com/nmasse-itix/photo-stream.git
将主题下载下来
这里可以通过使用git submodule 方式引入
将主题内自带的exampleSite 文件夹内文件复制到根目录
cp themes/photo-stream/exampleSite/config.toml . 配置文件 在项目根目录下content文件夹下创建第一个项目目录，例如&amp;quot;first&amp;quot;
并在first文件夹下创建一个空文件index.md
index.md内容为以下内容
--- title: &amp;#34;beauty&amp;#34; date: 2020-09-03T08:22:38+08:00 # By default, photos are sorted by filename sort_by: Name # But you can sort instead by EXIF date if you prefer # sort_by: Exif.Date resources: # # You can set the album cover image by setting the param &amp;#39;cover: true&amp;#39; # on a photo.</description>
    </item>
    
    <item>
      <title>photo代码</title>
      <link>https://pub.oribos.cn/web/note/2020090301.html</link>
      <pubDate>Thu, 03 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090301.html</guid>
      <description>photo pipeline { agent any stages { stage(&amp;lsquo;检出&amp;rsquo;) { steps { checkout([ $class: &amp;lsquo;GitSCM&amp;rsquo;, branches: [[name: env.GIT_BUILD_REF]], userRemoteConfigs: [[ url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID ]]]) } } stage(&amp;lsquo;改写ssh&amp;rsquo;) { steps { sh &amp;rsquo;ls -a&amp;rsquo; sh &amp;lsquo;mkdir -p ~/.ssh&amp;rsquo; withCredentials([ sshUserPrivateKey(credentialsId:&amp;lsquo;79eea4d2-1079-482a-bb35-0c9963537257&amp;rsquo;,keyFileVariable:&amp;lsquo;SSH&amp;rsquo;) ]) { sh &amp;lsquo;cat ${SSH} &amp;gt; ~/.ssh/id_rsa&amp;rsquo; }
sh &#39;chmod 600 ~/.ssh/id_rsa&#39; } } stage(&#39;更新子模块&#39;) { steps { sh &#39;git submodule init&#39; sh &#39;git submodule update&#39; sh &#39;git submodule foreach \&#39;git pull origin master\&#39;&#39; } } stage(&#39;hugo&#39;) { steps { sh &#39;git clone git@e.</description>
    </item>
    
    <item>
      <title>进一步完善</title>
      <link>https://pub.oribos.cn/web/note/2020090373.html</link>
      <pubDate>Thu, 03 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090373.html</guid>
      <description>进一步完善 通过研究前后端分离项目，转而想进一步将hugo生成的博客静态页面链接必要的后端服务。需要在页面上增加对前端框架的支持以运行同后端服务api的连接。
为什么非要配置前后端分离？ 在我看来，以wordpress为代表的服务器渲染式网站，需要复杂服务器环境，消耗大量服务器性能，框架固定保守等等问题，象征着盲目和落后。有些流行的php架构主体已经十多年没有更新，大量新手被忽悠着选择浪费性能的方式制作简单的页面。
前后端不分离以为着保守，封闭，落后
进一步使用持续集成 服务器使用的hugo vue 和其他应用，将全部提交到持续环境上运行，coding构建计划，github actions 或者vercel netlify自动部署。
进一步的持续集成，hugo项目将不再在本地和服务器上保留和推送生成文件。pages所需要的静态页面由该环境自动生成。
鉴于本地运行应用多且复杂，针对前端环境特意去配置多种环境是没有必要的，将前端环境打包部署运行在持续集成中，运行在容器里，脱离复杂的个人电脑。
文件备份 以nas git oss 等全方面文件共享和备份。
https 博客，资源全面使用https协议，</description>
    </item>
    
    <item>
      <title>先写代码后补充内容</title>
      <link>https://pub.oribos.cn/tech/develop/2020/2020-09-01-%E5%85%88%E5%86%99%E4%BB%A3%E7%A0%81%E5%90%8E%E8%A1%A5%E5%85%85%E5%86%85%E5%AE%B9/</link>
      <pubDate>Tue, 01 Sep 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/tech/develop/2020/2020-09-01-%E5%85%88%E5%86%99%E4%BB%A3%E7%A0%81%E5%90%8E%E8%A1%A5%E5%85%85%E5%86%85%E5%AE%B9/</guid>
      <description>先写代码后补充内容 类似如下的代码
&amp;lt;div class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;div1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; $(&amp;#34;#div1&amp;#34;).load(&amp;#34;https://base.oribos.city/function/html/1002.html&amp;#34;); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; 作用 先将基础代码构建到页面上，嵌入api，html等可以随时变动的内容。这样主页面保持不变情况是，可以灵活变动页面内容。
本质上跟前后端分离，css文件引用原理一样。</description>
    </item>
    
    <item>
      <title>blog代码</title>
      <link>https://pub.oribos.cn/web/note/2020083103.html</link>
      <pubDate>Mon, 31 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020083103.html</guid>
      <description>blog pipeline { agent any stages { stage(&amp;#39;检出&amp;#39;) { steps { checkout([ $class: &amp;#39;GitSCM&amp;#39;, branches: [[name: env.GIT_BUILD_REF]], userRemoteConfigs: [[ url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID ]]]) } } stage(&amp;#39;改写ssh&amp;#39;) { steps { sh &amp;#39;ls -a&amp;#39; sh &amp;#39;mkdir -p ~/.ssh&amp;#39; withCredentials([ sshUserPrivateKey(credentialsId:&amp;#39;15a357be-78af-4353-ae31-aa6d14fa6c0d&amp;#39;,keyFileVariable:&amp;#39;SSH&amp;#39;) ]) { sh &amp;#39;cat ${SSH} &amp;gt; ~/.ssh/id_rsa&amp;#39; } sh &amp;#39;chmod 600 ~/.ssh/id_rsa&amp;#39; } } stage(&amp;#39;更新子模块&amp;#39;) { steps { sh &amp;#39;git submodule init&amp;#39; sh &amp;#39;git submodule update&amp;#39; sh &amp;#39;git submodule foreach \&amp;#39;git pull origin master\&amp;#39;&amp;#39; } } stage(&amp;#39;npm&amp;#39;) { steps { sh &amp;#39;npm init -y&amp;#39; sh &amp;#39;npm install -g cnpm --registry=https://registry.</description>
    </item>
    
    <item>
      <title>index代码</title>
      <link>https://pub.oribos.cn/web/note/2020083107.html</link>
      <pubDate>Mon, 31 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020083107.html</guid>
      <description>index 部署在www.efs.app上的构建计划配置代码
pipeline { agent any stages { stage(&amp;#39;检出&amp;#39;) { steps { checkout([ $class: &amp;#39;GitSCM&amp;#39;, branches: [[name: env.GIT_BUILD_REF]], userRemoteConfigs: [[ url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID ]]]) } } stage(&amp;#39;改写ssh&amp;#39;) { steps { sh &amp;#39;ls -a&amp;#39; sh &amp;#39;mkdir -p ~/.ssh&amp;#39; withCredentials([ sshUserPrivateKey(credentialsId:&amp;#39;15a357be-78af-4353-ae31-aa6d14fa6c0d&amp;#39;,keyFileVariable:&amp;#39;SSH&amp;#39;) ]) { sh &amp;#39;cat ${SSH} &amp;gt; ~/.ssh/id_rsa&amp;#39; } sh &amp;#39;chmod 600 ~/.ssh/id_rsa&amp;#39; } } stage(&amp;#39;更新子模块&amp;#39;) { steps { sh &amp;#39;git submodule init&amp;#39; sh &amp;#39;git submodule update&amp;#39; sh &amp;#39;git submodule foreach \&amp;#39;git pull origin master\&amp;#39;&amp;#39; } } stage(&amp;#39;npm&amp;#39;) { steps { sh &amp;#39;npm init -y&amp;#39; sh &amp;#39;npm install -g cnpm --registry=https://registry.</description>
    </item>
    
    <item>
      <title>分享呆萌头像</title>
      <link>https://pub.oribos.cn/web/note/2020083113.html</link>
      <pubDate>Mon, 31 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020083113.html</guid>
      <description> https://twitter.com/lenz9644?lang=ga
分享呆萌头像 </description>
    </item>
    
    <item>
      <title>有限控制</title>
      <link>https://pub.oribos.cn/web/note/2020083003.html</link>
      <pubDate>Sun, 30 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020083003.html</guid>
      <description>减少核心处理量 搁置项目 仅对未完工的项目,搁置进一步发展,并不对历史进度进行彻底清空
后续可能使用搁置项目
放弃对鸡肋的控制力 次要项目 使用引用,导入,克隆方式对别项目进行引用.尽可能的不去修改所引用项目的内容
对引用项目的修改使用另外的代码和配置覆盖其效果,而不是对引用项目直接修改
尽管引用的项目控制权在其作者手里,自己必须拥有一份相对完整的代码拷贝</description>
    </item>
    
    <item>
      <title>此消彼长</title>
      <link>https://pub.oribos.cn/web/note/2020083171.html</link>
      <pubDate>Sun, 30 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020083171.html</guid>
      <description>感悟 有的人看到红色划一道红色，看到蓝色划一道蓝色，看的多了画出来是五彩缤纷。有的人看到红色划一道红色，看到蓝色就抹掉红色重新划一道蓝色，周而复始，结果画出来一团黑糊糊一片。
一个部族，需要保守的指挥和激进的指挥，至于决策者才用何种方式那是决策者自己的利益选择。不应彻底否定保守或者激进。缺乏多样的可能性和势力均衡，组织决策容易走向极端。
不同态度的之间的此消彼长是必要的，但不应坚持把对方赶尽杀绝。因为，如果对方能确定可观的支持，那么必然存在滋生其生长的客观原因。不去关注其根本原因，必然无法治本。极端的打压和剿灭必然产生相当大的成本。
个人亵渎神明，神明没有表现明显的惩罚，反倒是人类自己会去攻击亵渎者。就像别人侵害了自己利益一样，对神明和信仰的维护本质上是维护自身利益，跟神明和信仰本身并没有相关性。因为，神明和信仰不会因为别人的质疑和反对就有所改变。那么，改变的什么？是信徒和其他人自身的概念和认知。</description>
    </item>
    
    <item>
      <title>Cloudflare Workers 发起 http 请求</title>
      <link>https://pub.oribos.cn/web/note/2020082801.html</link>
      <pubDate>Fri, 28 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082801.html</guid>
      <description>来自 ZeroDream 官方博客
Cloudflare Workers 发起 http 请求 如果想要在 Cloudflare Workers 中发起 http 请求，则需要用到 Fetch API。
注意：Fetch API 仅能在 Request 中使用。
首先我们来看看 fetch 的基本使用方法：
const response = await fetch(url, init); 其中 response 是返回数据的储存变量，url 是需要请求的地址，init 是请求的参数设定（可选的）。
init 有以下几个选项：
method：请求的方法，例如 GET 或者 POST headers：请求时需要发送的 headers，它是一个对象 body：请求时需要发送的内容，注意，这个选项不能在 GET / HEAD 方法下使用 redirect：重定向的处理方式，可选值：follow 跟随跳转，error 抛出错误，manual 手动处理 await 在异步函数内使用时必须要添加。 我们得到了 response 后，就可以开始对其进行处理，如果要获取返回的内容，可以这样写：
const data = await response.text(); 然后你就可以对 data 变量进行任何处理了。
下面是一段演示代码，用于获取访问者 IP 的地理位置：
addEventListener(&amp;#39;fetch&amp;#39;, event =&amp;gt; { event.</description>
    </item>
    
    <item>
      <title>web端被打压</title>
      <link>https://pub.oribos.cn/web/note/2020082811.html</link>
      <pubDate>Fri, 28 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082811.html</guid>
      <description>查看更多内容需要下载APP 下载APP以使用更多功能 付费下载且下载需要使用APP 不提供web端访问入口 web端内容陈旧 </description>
    </item>
    
    <item>
      <title>世界观</title>
      <link>https://pub.oribos.cn/web/note/2020082891.html</link>
      <pubDate>Fri, 28 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082891.html</guid>
      <description>维基百科
世界观 世界观（德语：Weltanschauung）意思是“着眼世界之上”。
这是德国知识论中所使用的词汇，指的是一个“广泛世界的观念”。世界观指涉的是一种人类知觉的基础架构，透过它，个体可以理解这个世界并且与它互动。
世界观和认知哲学 世界观是认知哲学和生产科学中的重要概念。这个词表达的是人所拥有的广泛世界的认知，而这源于他们对于这个世界的独特经验，或者更狭义地说，是民族经过长久时间以来对于世界的诠释。人的语言即反映了他们的世界观，这个意义由一些语言学的层次上展开，语句上的结构、无法翻译的内涵和它的外延。
一个以世界观绘成的世界地图将会跨越政治领域的障碍，因为世界观除了是人类政治活动的产物之外，同时也是共同人类经验、地理区域、自然气候条件、可用的经济资源、社会文化系统和语言系族的产物。人口遗传学者路易吉·路卡·卡瓦利-斯福扎便指出了人类基于血缘和语言而开展出来的共同文明进化的理论。
世界观的影响 此一名词指称对于世界作为人类实作以及人类存有的中介性，即一个综合意见的集合。世界观作为框架影响人类的知觉和经验，以及社会的许多层次：知识、政治、经济、宗教、文化、科学和道德。
举例来说，对于因果关系的理解的世界观有各式各样的面貌，它可能是单向的，或循环的，或是螺旋性的。这样一个认知结构便反映了对于世界的不同系统性理解，在中文中，我们指称这样的世界观为“世界史观”。一个单向的世界史观会是一种一神教的观点，认为世界历史只有一种方向，世界有究极的初始状态，并且将会在某个时间点结束，如同基督教所说“我是开始亦是终结”，回教亦有相同观点。而循环史观则认为世界的状态是系统性而不断循环的，如同四季不断更迭，例如祆教、波斯拜日教和印度教。
对于因果关系的世界观理解不只影响宗教传统，还有人类思想的其他层面，例如历史的目的、政治和经济理论、还有许多其他系统性思想：民主、独裁、无政府主义、资本主义、社会主义、共产主义。
有了线型史观和非线型史观的不同理解，便会产生在科学思考上各具特征的抽象机构。举例来说，对于世俗普遍行动和事件的不同理解，便会产生决定论和自由意志的种种对立。自由意志的世界观认为，世界的原则是简单的法则，他们总是维持稳定不变，在科学上它们称作经验主义；相反地，决定论的世界观认为世界的原则是由动态的系统组成，在科学方法上称作理性主义。
某些形式的哲学自然主义和唯物论反对实体会因为本身的限度而无法从事自然科学的命题，他们认为科学方法是最可信赖、建立模型以理解世界的最佳方法。</description>
    </item>
    
    <item>
      <title>大公司的恶行</title>
      <link>https://pub.oribos.cn/web/note/2020082831.html</link>
      <pubDate>Fri, 28 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082831.html</guid>
      <description>大公司的恶行 营销策略 价格歧视 免费试用 先给一个低价的或免费的诱惑让用户试用，但用户通过试用养成习惯后形成依赖，这是取消试用。用户不得不高价续费。
0元套餐，几个月后失效，继续使用需要续费。0元服务器，如果你在服务器上部署项目，试用结束后，你就会因为项目的持续运行承担高额服务费。
首年免费，首年打折。续费高昂，打折活动仅限新用户。
消极服务 售后服务程序自动答复，自动答复权限很低，无法解决复杂问题。
售后服务权限低，无法解决任何问题，只会机械式的解释。
事例 【#因微信封号坠亡男子哥哥发声#：确实太傻，腾讯人工客服不作为，一条人命15万太少了】因微信被封号，一男子从深圳腾讯用户接待中心跳楼身亡。8月27日，腾讯官方两次回应称，男子从腾讯公司坠亡说法不实，系租用大厦，公安确认属于自杀。坠楼者哥哥称，弟弟确实太傻太极端。他是想知道封号原因，腾讯人工客服不作为造成悲剧。15万元是街道办给的人道主义安慰现金，说是和腾讯无关，一条人命15万我们觉得太少了。</description>
    </item>
    
    <item>
      <title>微信令人讨厌之处</title>
      <link>https://pub.oribos.cn/web/note/2020082817.html</link>
      <pubDate>Fri, 28 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082817.html</guid>
      <description>刚注册的账号无法登陆 此账号是新注册的，不应该是长期不登陆的睡眠账号，出现这种情况完全是腾讯为了限制用户故意设置的障碍。
辅助认证的条件繁杂，苛刻 不知道什么情况就无法验证 这种情况要么是 之前给别人辅助认证过，但三个月内并没有什么认证。更别说是一年时间内，记不清到底有没有给别人辅助认证了。
纵然一年内有跟别人辅助认证，也不可能在这个账号上进行三次。
结论 结论是 微信：你也配登微信？</description>
    </item>
    
    <item>
      <title>方法论</title>
      <link>https://pub.oribos.cn/web/note/2020082897.html</link>
      <pubDate>Fri, 28 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082897.html</guid>
      <description>维基百科
方法论 方法学（又称为方法论），是哲学用语，指的是研究如何处理问题的一个哲学分支。南宋哲学家朱熹的格物致知论是方法论的典型例子。法国哲学家笛卡儿在1637年出版的哲学论著《谈谈方法》，被认为是有关方法论的重用著作，影响了西方主流学界的思维方式、思想观念、和科学方法的发展，对西方近代科学的快速发展起了相当大的促进作用。
定义 一门学问采用的方法、规则与公理；
一种特定的做法或一套做法；
在某种知识的领域上，对探索知识的原则或做法而作之分析（梅里厄姆-韦伯斯特词典）。
方法学意味着的通用概念就是：在某一门学问或所要探索的知识领域上，对所使用之个别方法加以整合、比较探讨与批判。
大多数科学学问都有它们各自特定的研究方法；方法学的任务，在于提出一系列能够支持这些方法之准确性和有效适用的原理。换言之，方法学在于证明方法的有效或无效，并提出支持采取或不支持采取该方法的理由。
在软件工程与专案管理中，方法学通常是指一系列编撰好的建议方法，有时还包括训练材料、正规教育性程序、工作表和图像工具。与其被称为方法学，这些概念比较适合叫作方法。
方法论的发展史 古中国 参见：格物致知
公元前600年：孔子提出了正名的要求，并提出“能近取譬”和“举一反三”等类推方法。
公元前350年：墨子在《墨经》中阐述了力的概念和力矩原理、杠杆原理，也提出了“粒子论”的雏形，指出“端”是不占有空间的，是物体不可再细分的最小单位。
公元前300年：公孙龙通过对“白马非马”这一命题的具体分析，提出了“唯乎其彼此焉”的正名原则。
公元前250年：韩非提出了“矛盾”概念，揭示了矛盾律。
公元前250年：荀子系统化地整理了名家和墨家对儒家正名思想的逻辑学理论。
公元86年：王充在反对宗教神学的斗争中，著作了《论衡》，强调要通过论证而达到辨真伪、证是非、驳虚假的目的。
公元240年：王弼为代表的“言不尽意”论和欧阳建的“言尽意”论之间的辩论。
公元1000年：程朱学派把“理”作为思想本体，发展出由一理推知诸理的认识论观点，是北宋理学的主要内容。
古典西方主流学派 在1960年代以前，西方科学研究的方法，从机械到人体解剖的研究，基本是按照笛卡儿的《谈谈方法》进行的，对西方近代科学的飞速发展，起了相当大的促进作用。
笛卡儿在《谈谈方法》中指出，研究问题的方法分四个步骤：
永远不接受任何我自己不清楚的真理，就是说要尽量避免鲁莽和偏见，只能是根据自己的判断非常清楚和确定，没有任何值得怀疑的地方的真理。就是说只要没有经过自己切身体会的问题， 不管有什么权威的结论，都可以怀疑。这就是著名的“怀疑一切”理论。例如亚里士多德曾下结论说，女人比男人少两颗牙齿。但事实并非如此。
可以将要研究的复杂问题，尽量分解为多个比较简单的小问题，一个一个地分开解决。
将这些小问题从简单到复杂排列，先从容易解决的问题着手。
将所有问题解决后，再综合起来检验，看是否完全，是否将问题彻底解决了。
现代复杂科学的出现 笛卡儿的方法论有其一定的缺陷，如人体功能，只是各部位机械的综合，而对其互相之间的作用则研究不透。直到阿波罗1号登月工程的出现，美国科学家才发现，有的复杂问题无法分解，必须以复杂的方法来对待，因此导致系统工程的出现，方法论的方法才第一次被综合性的方法所取代。系统工程的出现对许多大规模的西方传统科学起了相当大的促进作用，如环境科学，气象学，生物学，人工智能等等。</description>
    </item>
    
    <item>
      <title>字母解释法</title>
      <link>https://pub.oribos.cn/web/note/2020082401.html</link>
      <pubDate>Mon, 24 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082401.html</guid>
      <description>字母解释法 业余无线电字母解释法在业余无线电通讯中广泛使用，解决在无线电通讯中经常会碰到的声音无法清晰辨识，国际民用航空组织（ICAO）的通讯用语也普遍使用类似的解释法，同时在日常语言交流中也采用此方法。如&amp;quot;A&amp;quot;读Alpha、&amp;ldquo;C”读Charlie 、&amp;ldquo;R&amp;quot;读Romeo 、&amp;ldquo;J&amp;quot;读Juliet 等26个英文字母都有常用的解释法。
对照表 字母 解释 读音 中文解释 A ALFA [&amp;rsquo;ælfə] 阿尔法（第一个希腊字母） B BRAVO [&amp;lsquo;brɑ&amp;rsquo;vo] （喝彩声）好啊，妙啊 C CHARLIE [&amp;rsquo;tʃɑrlɪ] 人名（查理） D DELTA [&amp;lsquo;dɛltə] 德尔塔（第四个希腊字母） E ECHO [&amp;lsquo;ɛko] 回声 F FOXTROT [&amp;lsquo;fɑks,trɑt] 狐步舞 G GOLF [gɑlf] 高尔夫 H HOTEL [hoˈtɛl] 酒店 I INDIA [ˈɪndɪə] 印度 J JULIET [&amp;lsquo;dʒuljət] 朱丽叶 K KILO [&amp;lsquo;kilo] 千 L LIMA [&amp;rsquo;laɪmə] 利马（秘鲁首都） M MIKE [maɪk] 人名（麦克） N NOVEMBER [no&amp;rsquo;vɛmbɚ] 十一月 O OSCAR [&amp;lsquo;ɔskɚ] 奥斯卡 P PAPA [&amp;lsquo;papə] 爸爸（口语） Q QUEBEC [kwɪ&amp;rsquo;bɛk] 魁北克（加拿大省） R ROMEO [&amp;lsquo;romɪ,o] 罗密欧 S SIERRA [siˈɛrə] 塞纳（地名） T TANGO [ˈtæŋɡəu] 探戈舞 U UNIFORM [&amp;lsquo;junə,fɔrm] 制服 V VICTOR [ˈviktə] 胜利者 W WHISKEY [&amp;lsquo;hwɪskɪ] 威士忌（烈酒） X X-RAY [&amp;lsquo;ɛks&amp;rsquo;re] x-射线 Y YANKEE [&amp;lsquo;jæŋkɪ] 北方佬（美国） Z ZULU [&amp;lsquo;zulu] 祖鲁人（非洲东南部） 实例 “C”用Charlie 来进行解释，R，J分别用Romeo 与Juliett 进行解释等。这种解释，在业余电台用话的通信联络中是必不可少的。如呼号BY1PK ，除了按英文读法报出“B-Y-ONE-P-K”以外还应对字母进行逐个的解释，即“B-Y-ONE-P-K，BRAVO-YANKEE-ONE-PAPA-KILO“，如果一遍不够，可以从头在解释一遍。除ITU规定的解释法外，在实际工作中，我们往往还能听到很多不规则的解释法。这种不规则的解释法没有统一的规定，但必须是大家非常熟悉的名词，而起首字母必须与被解释的字母相同。</description>
    </item>
    
    <item>
      <title>观看视频和文章的原则</title>
      <link>https://pub.oribos.cn/web/note/2020082431.html</link>
      <pubDate>Mon, 24 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082431.html</guid>
      <description>拒绝短内容 例如：在B站视频低于10分钟的一律不点赞投币。同样一个视频60分钟。可以分成一个视频10分钟发布6个，或者一个视频6分钟发布10个。大量零碎的短视频形成快餐式阅读。10分钟只是个人界定短视频的标准，低于10分钟的视频一律不推荐阅读。除非是紧急分享，实时更新的特殊内容。
拒绝伪科学 拒绝抄袭搬运 拒绝无意义 </description>
    </item>
    
    <item>
      <title>页面新规则</title>
      <link>https://pub.oribos.cn/web/note/2020/2020081911.html</link>
      <pubDate>Wed, 19 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020081911.html</guid>
      <description>之前用的页面规则 content目录下直接引用子模块的全部内容形成 content/sub1 的形式
而sub1的文件就会收到不同调用时的限制，比如sub1/index.html在项目a中表现跟项目b中表现就会有巨大差异
新的规则 在content下创建一个固定的索引页面即content/index.html 这个文件保持固定格式，适用于当前项目
在content/project下引用子模块sub1形成 content/project/sub1 的形式
对于项目形成固定的目录形式project 和index.html 的固定形式，适用于当前项目，保证项目的正确表现。并不直接引用sub1子模块里的内容，而仅仅将子模块作为project里的扩展内容。
随着以上形式的变动，sub1作为扩展内容，剔除了不必要的index配置信息但保留独立的仓库。剔除掉的index配置信息交给项目里的固定的index配置，不再在子模块里配置。
总结 用于子模块，扩展内容，引用内容的仓库，尽可能的少携带配置信息，而仅仅保留必要的具体的内容。配置信息是跟随项目固定的要由项目所处的固定文件配置。
即：1 活动的信息仅提供相应内容，不涉及项目本身的配置。 2 子模块仅作为补充，不能完全取代子目录。</description>
    </item>
    
    <item>
      <title>计算机的束缚</title>
      <link>https://pub.oribos.cn/web/note/2020081713.html</link>
      <pubDate>Mon, 17 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020081713.html</guid>
      <description>人的控制欲 人是具有强烈控制欲的，自从人类从原始社会发展到私有制社会，人类就不知从何而来具有了强烈的控制欲，对物质的控制，对人的控制等等。阶级社会就是控制欲泛滥的社会。皇帝可以控制整个帝国，一家之主可以控制一个家庭等等，具有强烈自身意识凌驾于其他之上的力量被人类牢牢掌握着。
计算机的束缚 人类发明计算机，尽管赋予它们自动化和程序化的操作。但计算机的自动化完全在人类给的明确的框架里的。哪怕是人类自己对计算机发出指令故意输错一个字母，计算机都不会正确执行，或者说人类的程序设计就不让计算机去执行故意错误的指令。
https://base.oribos.city/images/2020/20200817031.png
逻辑体系差异 人类的大脑可以包容各类不同的逻辑体系，而计算机的算法建立在简单的逻辑运算上的，具有局限性，计算机不会认为执行错误代码是必须的，哪怕是某些单词意思相近，只要在算法上没有将相似的单词设置为操作关键字，计算机就不会去运行。
人类对计算机的故意限制 上例中，人类对程序代码编写中，已经通过算法识别到用户的操作单词拼写有误，并且给出了正确的建议。但是程序并没有自动按照建议的单词运行，即：人类发现了计算机运行中的拼写错误，但是没有主动为用户纠正拼写错误，扔以错误代码运行同时报错。
在控制力表现上看，就是计算机发现了人类错误，但计算机的控制力默认低于人类的控制力，计算机没有主动将自己的控制力超出人类的错误控制力。类似于，儿子发现了父亲的错误，但儿子只是提示了父亲，却没有主动纠正父亲的错误，因为身份差异。这在阶级社会和封建王朝时期是常见的。而人类对计算机的控制和故意限制也沿用了这种等级差别。
计算机是否会主动纠正？ 在计算机看来，正确的代码和拼写错误的代码均为用户的唯一输入，是否正确在计算机的逻辑上是确定的。计算机没有理由却保证用户意料的结果，即代码执行错误是用户的操作问题，计算机只需要保证完全按照用户指令就可以了。</description>
    </item>
    
    <item>
      <title>0813</title>
      <link>https://pub.oribos.cn/web/note/2020081313.html</link>
      <pubDate>Thu, 13 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020081313.html</guid>
      <description>日志 在ci里运行代码,将生成的文件推送到该仓库的gh-pages分支
推送本地分支local_branch到远程分支 remote_branch并建立关联关系 a.远程已有remote_branch分支并且已经关联本地分支local_branch且本地已经切换到local_branch git push b.远程已有remote_branch分支但未关联本地分支local_branch且本地已经切换到local_branch git push -u origin/remote_branch c.远程没有remote_branch分支并，本地已经切换到local_branch git push origin local_branch:remote_branch git push -u origin master和git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;作用 git push git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。
$ git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt; 注意：这里的:前后是必须没有空格的。
注意，分支推送顺序的写法是&amp;lt;来源地&amp;gt;:&amp;lt;目的地&amp;gt;，
所以git pull是&amp;lt;远程分支&amp;gt;:&amp;lt;本地分支&amp;gt;，而git push是&amp;lt;本地分支&amp;gt;:&amp;lt;远程分支&amp;gt;。
如果省略远程分支名，则表示将本地分支推送与之存在&amp;quot;追踪关系&amp;quot;的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。
$ git push origin master 上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。
如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。
$ git push origin :master 等同于
$ git push origin --delete master 上面命令表示删除origin主机的master分支。
如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。
$ git push origin 上面命令表示，将当前分支推送到origin主机的对应分支。
如果当前分支只有一个追踪分支，那么主机名都可以省略。
$ git push 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。</description>
    </item>
    
    <item>
      <title>换位思考</title>
      <link>https://pub.oribos.cn/web/note/2020081501.html</link>
      <pubDate>Thu, 13 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020081501.html</guid>
      <description>换位思考的概念 换位思考，是设身处地地为他人着想，即想人所想，理解至上的一种处理人际关系的思考方式。换位思考是人对人的一种心理体验过程。将心比心、设身处地是达成理解不可缺少的心理机制。它客观上要求我们将自己的内心世界，如情感体验、思维方式等与对方联系起来，站在对方的立场上体验和思考问题，从而与对方在情感上得到沟通，为增进理解奠定基础。它既是一种理解，也是一种关爱。
事实情况 媒体和教育总是用理解和包容的心态去教化他人，主流价值总是宣导和谐友爱，仿佛只要遵守这些看似美好的原则，社会就会安定团结，人民幸福美满。然而，事实是甲不是乙，没有亲身经历过乙的状况，根本不可能理解乙的所作所为，将心比心。很多时候，每个人所做的事是是不由己，别人很难理解也无法理解的。加入把甲跟乙从一开始就完全调换未知，甲不见得比乙做的更好。换位思考只不过是自欺欺人。
我们的教育，媒体文章，主流价值宣传总是宣传一些看似美好，实则违反人的基本思维逻辑，使用道德凭空捏造一些“美德”麻痹人民群众的生活。
为什么换位思考行不通？每个人的从小到大的成长历程不同，价值观差异，社会地位和经济条件差异。导致某些看似不合理的事情换做别人就很正常。没有那种对应的环境和生活体验是无法理解的。一瓶酒上万元，上万块可以让农民辛苦种多少庄稼？
事例 我们不理解为什么二战时候纳粹德国屠杀那么多犹太人，但是到了2020年四位美国警察暴力执法致乔治·弗洛伊德死亡，体现出美国社会对黑人的歧视和迫害。我们应该怎么看待？换位思考一下，如果美国人自己是黑人？他们就不歧视其他黑人了吗？未必。近代以前非洲黑人部落战争不断，奴隶贸易时贩卖黑人同胞，1994年卢旺达种族清洗事件。黑人不见得不歧视黑人。</description>
    </item>
    
    <item>
      <title>数量级的差距</title>
      <link>https://pub.oribos.cn/web/note/2020081901.html</link>
      <pubDate>Thu, 13 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020081901.html</guid>
      <description>生活中的差距 几岁的孩子能不能打赢健康的父亲？哪怕是这个孩子整天锻炼，他能使出的劲跟他父亲相比差距是巨大的。
有钱人家的孩子能买的起上万块手机，而穷人家的孩子买不起手机，那这两个孩子的差距是一部手机吗？
社会上的差距 世界范围上的差距 黑暗森林法则的问题 超出人类认知范围上的文明，他们的跟人类的差距是极其巨大的，他们使用的资源可能人类根本没有涉及。宇宙资源纵然有限，不同文明层次使用的资源水平是不相同的，一个使用整个银河系资源的问题，是不会对一个使用银河系100亿分之一资源的低级文明忌惮的。哪怕是对低级文明放任不管，他们的文明等级发展到跟高级文明比肩可能需要上亿年。纵然存在技术爆炸，但大部分时间文明只会待在一个固定水平，长期持续下去。有些甚至永远无法突破。</description>
    </item>
    
    <item>
      <title>腾讯乱七八糟的登陆方式</title>
      <link>https://pub.oribos.cn/web/note/2020081301.html</link>
      <pubDate>Thu, 13 Aug 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020081301.html</guid>
      <description>账户使用的邮箱 账户已经绑定了邮箱
但是使用这个邮箱无法重置账户密码
下图为别人的管理界面 我登陆腾讯云之后的管理页面
问题总结 账户绑定的邮箱和手机号，在腾讯云重置账户密码的时候，提示不存在
使用已经绑定的邮箱登陆，提示密码错误
只能使用微信扫码登陆
原因 腾讯为了推广微信验证登陆，强制要求用户只能使用微信扫码确认的方式，绑架用户习惯，设置复杂繁琐的流程限制用户自由使用账户和密码。
类似的情况还有微信登陆必须在手机上点击确认，本质上就是绑架用户习惯。
只要绑架了用户习惯，用户越来越离不开腾讯。</description>
    </item>
    
    <item>
      <title>内容分拆和规划</title>
      <link>https://pub.oribos.cn/web/note/2020/2020073119.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020073119.html</guid>
      <description>博客内容划分 由于内容进行了频繁的分拆和重新调整，某些文件夹功能出现重复，地址重复。</description>
    </item>
    
    <item>
      <title>内容组件</title>
      <link>https://pub.oribos.cn/web/note/2020090203.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090203.html</guid>
      <description>使用以下代码作为每篇文章的内容组件 &amp;lt;div class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;div1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; $(&amp;#34;#div1&amp;#34;).load(&amp;#34;https://base.oribos.city/function/html/1004.html&amp;#34;); &amp;lt;/script&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>区分资源块</title>
      <link>https://pub.oribos.cn/web/note/2020/202003151.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/202003151.html</guid>
      <description>资源块 纳法 辩证论
数量级
如果蚊子像苍蝇一样在周围飞，不对人造成影响
人会把蚂蚁视为害虫吗？</description>
    </item>
    
    <item>
      <title>博客内容划分</title>
      <link>https://pub.oribos.cn/web/note/2020/2020073111.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020073111.html</guid>
      <description>博客内容划分 记录 发布一些正常撰写发表的文章，
便签 随时发表，零碎的内容，需要进一步总结修改
知识库 记录学习到的内容
文档 各类设计引用的内容</description>
    </item>
    
    <item>
      <title>博客架构</title>
      <link>https://pub.oribos.cn/web/note/2020082111.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082111.html</guid>
      <description>首页 仅以www.efs.app作为博客的首页，提供索引，分类等功能，展示基础的联系方式，代码分享地址。
efs.pub页面部署在github上，使用Netlify作为静态页面托管1 。
内容页 尽管以www.efs.app作为博客首页，但blog的主要更新页面为：blog.holz.pub。
扩展页 可能使用到的扩展页面均在首页里做链接。
&amp;lt;server.uns.pub&amp;gt; 提供服务器访问，后端应用
&amp;lt;ufs.pub&amp;gt; 提供存储服务，静态文件支持
必要的拷贝 尽管不太愿意将一个站点的内容使用多个域名，但考虑到网络的不确定性，多站点配置是有必要的，这些站点的地址并不固定。
blog.efs.app 内容同blog.holz.pub相同，但站点托管地址不同。
www.holz.pub 内容同www.efs.app有些许差异2 ，但主要功能相同
github pages存在dns污染等情况。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
由于 holz.pub 使用国内服务，需要标注ICP备案号&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    
    <item>
      <title>域名的充分使用</title>
      <link>https://pub.oribos.cn/web/note/2020083143.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020083143.html</guid>
      <description>减少域名持有量 充分利用已有域名 增加子域名使用 server,develop,app,config,static等作为子域名使用
多服务商 减少使用腾讯产品，不使用腾讯云dns</description>
    </item>
    
    <item>
      <title>字母表</title>
      <link>https://pub.oribos.cn/web/note/2020082151.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020082151.html</guid>
      <description>字母解释法 根据国际电信联盟ＩＴＵ的规定，业余通信中运用国际民航组织（ＩＣＡＯ）使用的解释法作为其“标准解释法”。此外也经常用一些人们熟识的地名、人名等来解释字母，形成了习惯使用的其他解释法。
字母 标准解释法 A ALFA B BRAVO C CHARLIE D DELTA E ECHO F FOXTROT G GOLF H HOTEL I INDIA J JULIET K KILO L LIMA M MIKE N NOVEMBER O OSCAR P PAPA Q QUEEC R ROMEO S SIERRA T TANGO U UNIFORM V VICTOR W WHISKEY X X-RAY Y YANKEE Z ZULO </description>
    </item>
    
    <item>
      <title>封闭的互联网</title>
      <link>https://pub.oribos.cn/web/note/2020090103.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020090103.html</guid>
      <description>各类公司营造自己封闭的资源 淘宝禁止百度抓取，微信公众号对外封闭，闲鱼，快手等app只提供app访问。
造成的结果 以上各类公司对web端，搜索引擎的封闭看上去是各自的经营策略。然而形成的影响是多种多样的。
曾经看到一个呆萌的头像，想寻找其出处。在百度上搜索半天，找不到任何有价值的信息。换用谷歌，搜索到twitter上原作者发表的文章，进而通过其作者的id，在微博上搜索到其发布出处。
这期间，直接使用百度是无法从微博上搜索到有价值信息的。这或许是百度搜索技术问题，也可能是微博对百度搜索的专门屏蔽。你只有准确的输入该作者的id，缺一个字母都不行
整个过程就是：离开国内封闭的互联网环境，从其他更开放的环境下搜到有价值信息，然后在到该封闭环境下的继续搜索。</description>
    </item>
    
    <item>
      <title>心理问题</title>
      <link>https://pub.oribos.cn/web/note/2020080503.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020080503.html</guid>
      <description>心理 心理医生会有意无意的将患者的心理问题夸大化，会将症状归为一种难听难懂的词汇比如口欲期、肛欲期、俄狄浦斯期。这些名词无法准确的描述症状却让人感觉不适。
严重性 大部分人都存在或多或少的心理问题,这跟童年生活环境有关,特别是保守,封闭,教育程度低的地区.而大部分人的心理问题并不会对社会造成多大伤害.
反而心理医生会借助各类相关技术,夸大表现.就好比一个世界名厨要教人怎么品味食物,钢琴师音乐家教大家欣赏音乐.而大部分人只是在唱歌房吼几嗓子,不需要那么专业.
但是心理医生对人的心理问题的分析是有很大的借鉴的,心理医生通过科学方法对日常生活中的表现,个人行为习惯分析,得出的结论可能是普通人半辈子才能理解的知识.
资本家的伎俩 某些资本家为了利益所常使用的伎俩
锚定效应
价格歧视
免费营销</description>
    </item>
    
    <item>
      <title>忒修斯之船</title>
      <link>https://pub.oribos.cn/web/note/2020080407.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020080407.html</guid>
      <description>忒修斯之船 公元1世纪的时候普鲁塔克提出一个问题：如果忒修斯的船上的木头被逐渐替换，直到所有的木头都不是原来的木头，那这艘船还是原来的那艘船吗？因此这类问题现在被称作“忒修斯之船”的问题。有些哲学家认为是同一物体，有些哲学家认为不是。在普鲁塔克之前，赫拉克利特、苏格拉底、柏拉图都曾经讨论过相似的问题。近代霍布斯和洛克也讨论过该问题。这个问题的有许多变种，如“祖父的旧斧头”。
哲学家托马斯·霍布斯后来对此进行了延伸，如果用特修斯之船上取下来的老部件来重新建造一艘新的船，那么两艘船中哪艘才是真正的特修斯之船？
类似的悖论 人体组织细胞更新的周期大致为120至200天左右（神经组织细胞除外），大约每6到7年就可以全部更新为新的细胞。
赫拉克利特之河 人们虽然同样渡过相同的河，但流经身旁的水却是不同的。普鲁塔克亦引用赫拉克利特的观点，提出无法再次渡过相同的河流的假说。
祖父的旧斧头英文的口语，指某物每次都残留了本来的一部分；但更换了另一部分，逐渐所有的部分都换过的意思。斧头的刀刃换了3次，刀柄也换了4次，可是还是同一把旧斧头。
个人认识 在我看来，概念本身就不是真正的客观的存在。概念是人类认识事物的一种表述，是抽象的，不固定的。
比如 一张钞票，今天上午能拿去买1kg黄金，然后下午爆出消息经济崩溃，钞票不值钱了成垃圾了。买不到任何东西了，钞票本身一点没变，但它的价值变了不能称为钞票了，成废纸了。所以，钞票或者说钱这个概念，跟其物理属性的关系不是固定的，钞票破损一点仍能使用。破损一半仍是钞票，只不过价值可能有所损失，但仍是钞票。
忒修斯之船哪怕是换掉了所有的材料，只有有一个人认为这个船还是忒修斯之船，那么这艘船在这个人心目中仍然是忒修斯之船。这是根据人的认识的，不是明确的客观的。许多人不认可换掉大部分材料的船不再是忒修斯之船，那也是这个概念在这些人心目中的概念，这个概念本身就是抽象的，不固定的。</description>
    </item>
    
    <item>
      <title>操作系统</title>
      <link>https://pub.oribos.cn/web/note/2020081113.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020081113.html</guid>
      <description>操作系统内置SSL证书 由于在网络传输中，传递ssl加密证书公钥是不可靠的。所以，一直相对完善的https信息往往将内容使用可信赖的CA机构的ssl证书加密。而客户端用来内置的CA证书公钥对内容解密。这就保证了信息的可信任性。
对于国家机构，不应使用国外操作系统的CA机构证书。因为无法避免数据被窃听的风险。但对于国内用户而言，信息被海外企业窃听的风险较低，反而为了防止数据被盗用，必要的审查等考虑。使用有别于国家机构的第三方CA机构证书是有必要的。</description>
    </item>
    
    <item>
      <title>日志</title>
      <link>https://pub.oribos.cn/web/note/2020/2020073191.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020073191.html</guid>
      <description>日志 </description>
    </item>
    
    <item>
      <title>注意别人说法时的出发点</title>
      <link>https://pub.oribos.cn/web/note/2020080613.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020080613.html</guid>
      <description>注意别人说法时的出发点 媒体,网络文章发表的文章,作者在编撰文章的时候,是有他自己的利益,价值观的出发点的.某些现象,某些事实经过作者的描述的时候,会不自觉的进行调整,校正.淡化他们不想提或跟他们利益价值观相悖的内容.
频发使用语气,频繁对某些事情定性,频繁表现个人的喜恶就是很明显的表现.
对历史的过度深究,对某些历史事件的过度批判,对资料不健全的情况的单方面定性都是片面的,有目的的.
历史 历史真相很难弄明白,史料也存在偏差,删减,误导,虚假.对于有争议内容的过度研究,多度批判是不恰当的.
例子&amp;quot;止戈为武&amp;quot; 最初造字的时候,字体是按照形象创造的象形字,抽象意义的很难造字.&amp;ldquo;武&amp;quot;的造字本意里的&amp;quot;止&amp;quot;仅仅是指脚掌,脚趾.描述走路,行军.简单概括 &amp;ldquo;止戈&amp;quot;的本意就是&amp;quot;拿着武器行走的人&amp;quot;而《左传·宣公十二年》里楚庄王对武的解释,导致含义出现偏差,后人借此已经曲解了本意.</description>
    </item>
    
    <item>
      <title>记录</title>
      <link>https://pub.oribos.cn/web/note/2020080401.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020080401.html</guid>
      <description>英语跟汉语区别 表音文字和表意文字区别
英语作为表音文字，用少量的字母记录语言中的语音，从而记录语言的文字。字母是表音文字的基础，字母的数量较其他语言较少。文字的复杂程度跟使用的字母数量有关，存在不同的读音变异。不同文字之间用空格隔开。
汉语作为表意文字，用象征性书写符号记录信息的文字体系，不直接或不单纯表示语音。从象形文字发展而来，历史悠久。
局限性 随着人类对世界的认识，用象征性的符号无法有效的表达不断增长的信息。使用表意文字就会不断表现出局限性。一些抽象的概念，复杂的实物是无法使用表意文字有效的表达的。由于文字之间较少使用空格类似的分隔符来短句短词，词语语句会存在一些歧义的误解。
随着计算机的出现，表意文字较难使用计算机录入和处理。对表意文字的处理需要耗费更多的资源。
发展的眼光 不能因为表意文字的局限性就对此嗤之以鼻，未来世界的语言形式会超出人类现有的理解，单纯使用以表音文字或表意文字是片面的。</description>
    </item>
    
    <item>
      <title>防止信息泄露</title>
      <link>https://pub.oribos.cn/web/note/2020080511.html</link>
      <pubDate>Fri, 31 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020080511.html</guid>
      <description>互联网id 不会只使用一个互联网id,也不会在一个账号上捆绑太多的服务.
有计划的区分多个邮箱账户id
有计划的区分微信，微博，qq等sns账号。
密码和私钥 密码分级别,私钥需要全部备份.密码和私钥不保存在git仓库里
博客网站 为了区分内容,博客网站将被拆分成不同的域名,分别展示不同级别的内容.
多个git仓库 github多账号，资源权限区分，git仓库多服务商，及时备份。
多个手机号码 使用海外服务的手机号码和虚拟账号</description>
    </item>
    
    <item>
      <title>jsdelivr403问题</title>
      <link>https://pub.oribos.cn/web/note/2020/2020073017.html</link>
      <pubDate>Thu, 30 Jul 2020 08:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020073017.html</guid>
      <description>jsdelivr对直接访问进行阻断 直接访问cdn.jsdelivr.net下的github资源会提示403问题
通过页面带referrer的请求使用正常</description>
    </item>
    
    <item>
      <title>假如动物为人类投票</title>
      <link>https://pub.oribos.cn/web/note/2020/2020072911.html</link>
      <pubDate>Wed, 29 Jul 2020 08:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020072911.html</guid>
      <description>假如动物为人类投票 某一天，上帝让动物决定人类是否应该被消灭。由于人类对自然的影响，上帝需要通过大自然对待人类的态度决定人类命运，让动物对人类投票。
假设各种动物知道投票对它们带来的以下影响：
1 人类保护大熊猫，雪豹，藏羚羊，麋鹿等等许多野生动物，如果人类不存在，这些本来就濒临灭绝的动物可能会完全灭绝。
2 人类饲养猪，马，牛，羊，狗，猫等动物已经长期脱离自然环境，如果人类不存在，它们目前的演化程度很难适应大自然环境，它们可能出现数量锐减，仅可能剩少量艰难生存繁衍。
可能的结果 野生动物肯定不喜欢人类，对人类投NO票，因为人类的发展，对它们的栖息地造成毁灭影响，消灭人类可以让它们生存下来。
受到人类保护的动物，对人类投YES票，这些动物竞争力弱，适应环境能力差，随时可能灭绝，人类对它们的保护可以让它们规避灭绝的风险。
蚊虫，老鼠等动物，虽然不喜欢人类，但由于人类数量众多，在人类的栖息地这些寄生动物可以获得更多的食物资源，但如果没有人类，这些动物生存能力本身就强，对它们影响甚少。对人类投YES NO都无关紧要。
动物应不应该生存在动物园？ 老虎，狮子，大熊猫在动物园的生活条件比野外强太多了，不用担心捕食，不用担心受伤和疾病，不用担心野兽攻击。
但，动物园的老虎狮子，本身是需要进食的，人类可以给它们提供猪肉牛肉以食用。甚至会提供活的动物以训练它们生存能力，那么这些被捕食的动物想不想在动物园里居住？</description>
    </item>
    
    <item>
      <title>黑暗森林法则</title>
      <link>https://pub.oribos.cn/web/note/2020/2020072717.html</link>
      <pubDate>Mon, 27 Jul 2020 08:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020072717.html</guid>
      <description>未知的恐怖 未知是人对失去控制力的一种排斥反应，即当一个东西未能让人所控制掌握时，就会表现出厌恶，排斥等负面反应。
但未知是因为人类本身的认识局限性导致的，是客观存在的。未知的世界是不会被人所完全理解和掌握的。
黑暗森林并没有固定法则 宇宙就是一座黑暗森林，每个文明都是带枪的猎人，像幽灵般潜行于林间，轻轻拨开挡路的树枝，竭力不让脚步发出一点儿声音，连呼吸都必须小心翼翼：他必须小心，因为林中到处都有与他一样潜行的猎人，如果他发现了别的生命，能做的只有一件事：开枪消灭。在这片森林中，他人就是地狱，就是永恒的威胁，任何暴露自己存在的生命都将很快被消灭，这就是宇宙文明的图景，这就是对费米悖论的一种解释
这个看似合理的行为却经不起推敲。因为将每个文明都假设为猎人是极其幼稚的，你所认为的枪，炮在别的文明眼里就跟细菌，蚊子差不多。这个凶猛的猎人在别的文明眼里就跟兔子一样，开枪和攻击根本起不到任何效果。
重新认识 首先 黑暗森林并不会有一个固定的法则。
黑暗森林本身就是人类的局限性导致的未知世界，不会被人类影响，不会守人类控制。
其次 未知的目标不会固定表现一种态度。
即未知的文明是敌对，入侵还是和平友好并不是固定的。是根据自己的状态和目标的状态而改变的。
再次 对待未知，只有不断的提升而没有终点。
由于 未知文明是否入侵是不可控的，
探索本身是一种喜悦 由于探索本身是对未知的控制，所以，当未知文明发现一个新的目标，新的文明时，本身不会表现敌意。即生命体本身不会向外接表现敌意，只有自身的存在受到威胁或者攻击能导致正效益时，才会表现出敌意。
假如未知的文明，发现一个相对落后的文明。那么他们就会表现出掠夺，入侵的行为。这是必然的，不可控的。哪怕这个未知文明自身不会去攻击，只要两者相遇，高级文明必然会去掠夺落后文明，这是生命本身决定的。
自身能做的只有不断提升自己的对抗能力，提升安全水平，这个水平是没有终点了，文明本身只能不断提升自身，不断突破而不能停下，其实，提升和不提升都不能保证绝对安全，只是停止提升的风险要高于不断提升的风险。
提升的天花板 尽管文明自身会意识到只有不断提升自己，演化，超越才能安全的生存在已知空间。但文明自身的提升的天花板是极难突破的，符合大过滤理论。而突破提升的天花板将面临许多问题，
假如生命需要放弃自身的物质形态而得到进一步的提升，生命自身会不会去选择这种危险未知的抉择？因为在其他人眼里，这种提升以为着死亡。
假如生命需要混合其他杂乱的基因和造物去获得进一步的提升，这种杂交混合是否被伦理所接受？因为这样会被认为是对传统文化，生命意义的亵渎。
基于简单数学理论的机械结构，无法对他们的算法水平进行突破，就无法获得更高层次的提升。算法进行突破以为着过去的算法要重写，机械文明要重构。
基因是硬件 生命是软件 基因决定了生命的形态，是一种固定的客观的硬件框架。这个框架决定了生命的存在形式，发展方向，甚至基于硬件水平限制了生命的决定和功能。而生命是具有无限可能性的
生命或许在某种情况下突破基因的枷锁。
基因的需求是存在，生命的需求是探索。
空间的尺度 是否是因为跟其他文明过于遥远，就像广袤无垠海洋里一叶扁舟一样。是否没有受到其他猎人攻击是因为相隔过于遥远？实际上，我们认为的海洋的辽阔在人造卫星面前只是一段普通的空间。在太阳眼里就是一段尘埃。或许其他文明距离我们并非太远，而是太近了，人类太小了。</description>
    </item>
    
    <item>
      <title>记录</title>
      <link>https://pub.oribos.cn/web/note/2020/2020072111.html</link>
      <pubDate>Tue, 21 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020072111.html</guid>
      <description>日常文件记录 ssl证书 试用heroku,需要使用自定义域名的时候出现如下提示
.app域名必须使用ssl证书才能访问，而ssl证书在heroku只能付费账户使用
域名 我以为使用自己的域名，自己设置的地址，资源和名称掌握在自己手里，就能确保长期稳定使用。
但是，莫名其妙的感觉自己之前的域名太难听，直接放弃使用了，备案信息也主动注销了。或许属于一时冲动，但由于自己的心思变化，之前的域名确实无法使用了（为了减少因为变动导致的不确定影响，旧域名继续备用数年）。
这让我意识到，数据掌握在自己手里也不见得靠谱！
新增域名 由于使用新的资源管理方式和命名方式，ufs为管理的资源统一由ufs作为根命名，以hb fd 命名的内容由uns作为根命名
如下例：
旧命名： hb-ufs-static hb-kit-data
新命名 static.ufs data.kit.uns
命名方式 在命名文件夹和文件,项目,源代码变量等参数时,既可能不使用难以理解的词汇比如缩写,序号等.应使用易于识别的名词和结构.</description>
    </item>
    
    <item>
      <title>域名调整</title>
      <link>https://pub.oribos.cn/web/note/2020/2020072001.html</link>
      <pubDate>Mon, 20 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020072001.html</guid>
      <description>博客页面的域名调整 博客页面由http://b.hbn.pub 变更为 http://www.efs.app,但考虑到国内访问速度，由http://www.ufs.pub提供镜像。
即：博客页面以http://www.efs.app展示，但实际上可以通过http://www.ufs.pub在国内获得更快的访问速度。
造成这样的囧景要摆伟大的墙所赐。
.app的证书问题 .app域名需要使用ssl证书才能正常访问，在谷歌浏览器上访问http是无法正常访问的。
博客都更新分歧 博客需要的补充内容，一般引用 http://b.ufs.im
对不必要内容的放弃 减少对不必要内容的控制，某些低价值资源应果断放弃
问题点 尽管在名称上中意efs.app，efs.app也是打算作为主要域名使用。但其域名政策对ssl的强制要求，使得功能受到限制，在实际使用中很不方便。
ufs.pub作为国内专用域名，一般不解析海外内容，国内的服务器和存储服务一般使用此域名。
ufs.im作为海外专用内容，一般不在国内服务上使用，即所有在此域名上的信息都是受限的。
efs.app定位广泛，奈何功能受限。因为需要一个代替的域名korlys.com，</description>
    </item>
    
    <item>
      <title>内嵌页面</title>
      <link>https://pub.oribos.cn/web/note/2020/2020071717.html</link>
      <pubDate>Fri, 17 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020071717.html</guid>
      <description>内嵌页面 </description>
    </item>
    
    <item>
      <title>种植向日葵失败</title>
      <link>https://pub.oribos.cn/web/note/2020071731.html</link>
      <pubDate>Fri, 17 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020071731.html</guid>
      <description>辛苦种出来的向日葵被各种蛀虫啃食 从4月份开始一颗一颗种植向日葵，到了三个多月后向日葵长成。先是蜗牛蛀虫啃食茎秆，后来是鸟啄未成熟的瓜子。
个人观念 这些啃食的鸟类，本人不愿意故意捕捉野生鸟类，但是这种肆意来戳食未成熟瓜子的鸟真的让人厌恶。完全改变了鸟类在我心目中的形象，驱赶攻击野生鸟类是必要的。
蜗牛，玉米螟等害虫就是完全找人恨，之前不理解大量使用农药，经过自己种植农作物，可以理解农药使用的必要性。
起初，以为种植向日葵就只需要长出来花朵就可以了，结什么样的瓜子并没有多大区别。关键是在于向日葵花好看。事实上由于种植的时间有区别，大片的向日葵并不是一起开花的，花朵并不好看，反而用的种子是那种细小很难食用的品种，结果导致花不好看，瓜子不好吃。整体种植向日葵还是失败的。
引申 蛀虫 种植向日葵，施肥浇水的时候，鸟类蛀虫并没有为种植向日葵出力。这些蛀虫像极了封建社会的土豪劣绅，现代社会的资本家。
没有种植过庄稼的时候，以为种下种子，浇水施肥就可以收获很多。其实，种子，土壤，天气，雨水等等影响太多了。选种不好，根本收获不到理想的果实。同时还要应对蛀虫鸟类的啄食。
当你没有经历的时候，并不知道自己需要什么。没有种植过向日葵，起初自想看花，结果看花失望，而种子又不好吃。才知道自己原先如果种植食用的种子的话，情况会更好。</description>
    </item>
    
    <item>
      <title>认识和看法2</title>
      <link>https://pub.oribos.cn/web/value/2020/2020071513.html</link>
      <pubDate>Wed, 15 Jul 2020 19:09:38 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/value/2020/2020071513.html</guid>
      <description>政治 平民只所有感觉政治跟他们无关，就因为他们没有能力接触到对社会的控制力：政治。被隔绝出政治之外。
财富 古代交通不便，国家没有能力完全统治辽阔的疆域，比如汉代将偏远地区分封出去也是迫不得已。这些封地的实际统治者的后代在皇帝统治力强的时候，维护皇帝统治，当皇帝统治力弱化时候就会偏离。
皇帝培养的利益集团，掌握大量国家资源，从皇帝手里攫取大量财富，但是当皇帝困难时候，他们想到的不是知恩图报，维护皇帝统治，而是事不关己，甚至坐看王朝灭亡，明朝就是例子。这是资本的本性。
当今社会，面对2020年的突发疫情，许多企业门店经营受到影响。这个时候呼吁房东减免房租，看似普通的纠纷，确实涉及很大问题。房东们之所以获取富裕的房产就是依仗国家的发展，政策的实惠，房东们赚到钱应该为国家考虑，在疫情期间减免部分房租，缓和社会矛盾。因为租户经营受到损失，还让他们拿出本金让房东正常牟利，本质上很有问题。而不出意外，大多数房东是不会顾及社会矛盾，国家困难的，这些跟他们无关。疫情和困难不能影响他们赚钱，房租不能减免！这种行为本质上跟明朝时期极其类似。各类富甲一方的王侯贵族不愿意出钱给崇祯去剿灭李自成。
垄断的几种形式 托拉斯指的是在一个行业（商品领域）中，通过生产企业间的收购、合并以及托管等等形式，由一家公司兼并、包容、控股大量同行业企业来达到企业一体化目的的垄断形式。换言之，一个托拉斯是一个公司、一个法人，其组织形式是通过这个公司内部的行政渠道，达成共同策略。因为是内部行政渠道，不涉及公司之间的谈判，所以托拉斯是四种垄断方式中最稳定的之一。
卡特尔则是由一系列生产类似产品的企业组成的联盟，他们是不同的公司，所以有不同的决策目标，而这种目标由于反垄断法的要求，是不可能通过合同统一的，所以这些公司只能够通过某些协议或规定来控制该产品的产量和价格，而这些协议大部分属于“君子协议”，并没有约束力。只要卡特尔成员中出现决策分歧，卡特尔通常维持不下去。所以，卡特尔是四种垄断方式中最不稳定的。
辛迪加是四种垄断形式中最低级的垄断形式，因为它仅仅是通过少数处于同一行业的企业间相互签订协议，使得加入了辛迪加的企业都由辛迪加总部统一处理销售与采购事宜。生产资料通过成员间的协议进行二次分配。辛迪加的主要目的在于批量采购和销售可以节约资本，这对于每个企业来说，决策都是一致的，同时，一个企业退出辛迪加就意味着他不得不自己建立自己的销售网络——这往往是比较困难的，因此辛迪加的组织形式较为稳定。
康采恩是一种通过由母公司对独立企业进行持股而达到实际支配作用的垄断企业形态。一般情况下，基本是由集团中的银行以及其他金融企业来担当控股公司这一角色。从组织形式看，康采恩是通过经济和行政渠道对于子公司进行控制的，所以稳定性与托拉斯相当，优于卡特尔和辛迪加。从涉及方面来看，这种垄断形态与卡特尔以及托拉斯不同，它的直接目的不是支配市场。在资本集中方面上，所以往往超越单一市场领域，在这点上看，康采恩比卡特尔和托拉斯更加进步。顺带一提，康采恩是德语词的音译，东方一般把这种组织形式叫做“财阀”，例如三井、住友、现代什么的。
知识垄断 小学：小学的作用是认识基本的道德和世界的现象
知道礼义廉耻，知道好坏对错。
中学：世界的基本规则和基本原理，社会行为和基本原理
初中： 更全面的认识世界基本规则。
高中： 初步认识世界的规则和原理，初步研究原理。
更有效的社会劳动和基本的三观。
大学：探索基本原理和规则，建立和完善规则，初步研究原理。
本科：基础知识和专业知识的积累和完善，为特定领域的研究和扩展做准备。
专科：特定领域的实践和工作，初级的社会实践，
研究生：在特定领域和有限范围内扩展人类知识水平，制定原理本身。</description>
    </item>
    
    <item>
      <title>内容分离</title>
      <link>https://pub.oribos.cn/web/note/2020/2020071301.html</link>
      <pubDate>Mon, 13 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020071301.html</guid>
      <description>待完善
完全的内容分离 随着对于内容的管理越来越完善，是时候进行更复杂的内容分离。
1 内容A类
正常更新的内容，文章，索引，链接
这些内容是正常博客可以正常更新的，不会引起不必要的麻烦的内容。
这些放到主博客页面，源码放到正常仓库。
2 内容B类
具有版权争议，内容较敏感的内容，虽然不符合某些规定但不验证的
主要有博客的评论等不符合备案要求的功能，转发或引用的某些具有争议的内容
这些内容不会放到主博客页面，根据需要用主博客的链接或跳转方式跳转到中间页面，这种内容的源码不会放到正常仓库，会根据需要放到特定仓库。
3 内容C类
可能引起某些问题，涉及政治正确，道德伦理，法律法规的内容。
可能涉这些内容的，主博客 和中间页面都不会存放源代码和内容。
分离域名 根据A类，B类内容的差异，会影响的分离不同的域名，作为中间页面和存放B类内容的域名解析会使用中转功能，即：访问者访问固定域名ap，通过ap的跳转或链接访问到B站点，因为B站点的域名解析，内容位置并不会固定。
原则 绝对不在国内服务上使用海外服务
需要使用海外服务的，使用海外专用账户，同国内服务在域名，服务器，git托管上完全分离
使用海外服务时，hk服务应尽可能排除
服务商 使用github作为博客内容仓库，然后使用now.sh 和netlify作为扩展博客内容的网页托管
使用coding构建计划，构建自动部署，然后推送到国内cdn对资源仓库和博客
由于页面访问经常出现故障，取消使用github pages 和coding pages
由于计费不明，取消使用aws amplify</description>
    </item>
    
    <item>
      <title>控制力</title>
      <link>https://pub.oribos.cn/web/note/2020/2020071303.html</link>
      <pubDate>Mon, 13 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020071303.html</guid>
      <description>待完善
控制力 物种的控制力 植物是很难趋利避害，面对食草动物的啃食，植物在短时间内很难做出有效防御。动物则不同，动物可以通过奔跑，变色，攻击或喷毒来进行一定程度的防御和反击。
尽管病毒和细菌深刻影响着世界，作为微生物，病毒和细菌在个体上是相当脆弱的，它们的生存需要依靠数量级的作用力，即单个病毒和细菌的影响力控制力相当低。
通过以上信息，得出一个观点：物种的进化跟他们的控制力是有相关性的。即低等物种高等物种的区别是其作用力控制力。
控制力的差别 人类的控制力跟动植物是有区别的，人类是一个社会性动物。个体脱离社会孤立生存的能力很差，甚至不如一般动物。人类的作用力控制力的体现是群体的，社会性的。对于人类而言，地位高低是对社会资源的控制。
人类晋升的标准 简单概括，人类个体的价值判断就以其对社会资源的控制力作为高低标准。其他的方方面面只是对社会资源控制的体现。古代是以人口，土地，粮食。现在进入资本主义时代，这些都以资本作为唯一衡量，资本成为了人类对社会资源控制的统一体现。但资本并不单单以资金，金钱表现。</description>
    </item>
    
    <item>
      <title>各种设计2</title>
      <link>https://pub.oribos.cn/web/note/2020/2020071319.html</link>
      <pubDate>Mon, 13 Jul 2020 08:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020071319.html</guid>
      <description>统计各种奇葩设定和故障-2 第一期
git在windows客户端上的卡死，无响应
联通手机4G信号的网络阻塞（换电信卡瞬间打开）
VSC的ssh登录 由于更换了服务器的域名和ip,使用vsc ssh登录服务器的时候出现卡死, 卡死除了显示这个一直进行链接的显示外,没有任何提示,其实是需要进一步的操作,但vsc并没有响应出来.
出现这个的根本原因是ssh证书登录的时候证书验证出现问题,本地的证书缓存信息跟实际不符(修改了域名和地址),解决方法:删除ssh证书配置文件里的 known_hosts 文件
链接限制 QQ，微信对外部链接的限制 </description>
    </item>
    
    <item>
      <title>标准化的url地址</title>
      <link>https://pub.oribos.cn/web/note/2020/2020071111.html</link>
      <pubDate>Sat, 11 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020071111.html</guid>
      <description>重新定义地址方式 第一段 资源组，域名，本地地址。
域名以 http://denalon.github.io http://www.hbn.pub/ 等形式构成，具有固定形式
第二段 目录
例如 web/note/2020/
第三段 最终位置
标识最终位置的目录，</description>
    </item>
    
    <item>
      <title>新版本</title>
      <link>https://pub.oribos.cn/web/note/2020/2020070911.html</link>
      <pubDate>Thu, 09 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020070911.html</guid>
      <description>完全使用子模块管理内容目录 将content目录下的内容全部设置git submodule 子模块引用，且更新也是采用git submodule init git submodule update更新
当子模块内容更新后，使用git submodule foreach git pull origin master更新
子模块配置较难修改 之前在构建计划里使用git clone 添加子目录内容，当需要添加子目录时，只需要添加一条git clone命令就可以了。删除同理。而使用git submodule子模块之后，尽管同步文件不再需要一一添加git clone，但对于需要修改子目录的名称，路径和增删子模块等操作时，就需要将整个源码文件git clone到本地增减修改。相比之前只在构建代码配置文件上增减一两条记录来说较繁琐。
原有仓库存档 原来的仓库下载本地之后，归档。删除原仓库地址。此处测试子模块是完全使用新的仓库，当测试完成后，原测试仓库引入项目组之后，代码归档之后删除旧的源码仓库和测试仓库。
内容管理 对文件的重新调整，目录的调整是为了实现复杂的文件管理和项目管理而做的测试和试验。</description>
    </item>
    
    <item>
      <title>在coding构建计划里使用凭证</title>
      <link>https://pub.oribos.cn/web/note/2020/2020070711.html</link>
      <pubDate>Tue, 07 Jul 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020070711.html</guid>
      <description>代码如下： stage(&amp;#39;改写ssh&amp;#39;) { steps { sh &amp;#39;ls -a&amp;#39; sh &amp;#39;mkdir -p ~/.ssh&amp;#39; withCredentials([ sshUserPrivateKey(credentialsId:&amp;#39;8f0ccd51-1927-45f2-be05-3d8a600d725e&amp;#39;,keyFileVariable:&amp;#39;SSH&amp;#39;) ]) { sh &amp;#39;cat ${SSH} &amp;gt; ~/.ssh/id_rsa&amp;#39; } sh &amp;#39;chmod 600 ~/.ssh/id_rsa&amp;#39; } } 步骤演示 录入凭证 在构建计划里使用凭证</description>
    </item>
    
    <item>
      <title>004</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020070405.html</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020070405.html</guid>
      <description>规划 重新规划内容目录
fd额外内容 重新启用备用主题 单页info页面重新使用。</description>
    </item>
    
    <item>
      <title>预期</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020070411.html</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020070411.html</guid>
      <description>图片设计 假如结论跟你的预期不符
一 人类使用科学是有限的，因为科学是人类的工具和方法，而人本身的认知是有限的，导致以科学为依据的对世界的探索和方法是有限的。
二 有没有完善的，完美的方法？ 对目前人类来说，没有。因为人本身的认知是有限的，超越人类有限认知的东西是无法被接触和理解的。类似二维空间里的世界是无法理解“高度”这种概念的。追求超越人类有限认知的突破是没有意义的。
三 人类目前的认知中，科学是最有效的工具和方法，以一种求极限的形式，逐步逼近对无限世界的认知极限。
四 在由法律，道德，规范约束的人类社会，追求绝对的科学态度是极其奢侈的。人类的利益，社会意识形态，文化等多方面因素限制了绝对理性的科学理论发展。在特定条件下，某个模型如果只存在前进不存在阻力，那么这个模型会越来越大最终达到条件极限后崩溃。因为人类活动空间是有限的，人类社会的任何行为最终会禁锢在这个有限空间，发展过程里必然存在阻力以平衡各种矛盾。</description>
    </item>
    
    <item>
      <title>文件管理</title>
      <link>https://pub.oribos.cn/web/docs/2020/202070471.html</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/202070471.html</guid>
      <description>重新规划的资源分类 uns holz ufs pps 作为四个资源分类
uns 杂项，未区分内容，总分类内容等，
转载，引用的内容
holz 纯个人内容
ufs 纯公开内容，内容性质不做区分的内容
pps 跟自己无关的其他分类
重新规划了文章目录 ufs dms
lambda note code hb
diary archive fd
p1 z02 asset
code单独出来 code虽然按照文件排列处于dms之下，但当代码库较多是单独作为主代码库，跟dms并列。
ufs hb fd
是否私有？
私有 hb fd 共有 ufs
dms kor lambda note
mms music video app backup ufs ufs应独立出来，统一管理个人信息意外的所有资源 下属四个主要目录 dms mms app backup
hb 系统内容，固定的，私有的内容 系统文件夹。
diary code archive
fd 额外的内容 z02 p01
ufs
dms</description>
    </item>
    
    <item>
      <title>代码分散</title>
      <link>https://pub.oribos.cn/web/docs/2020/202070307.html</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/202070307.html</guid>
      <description>多个子模块 需要将大量内容同步到代码托管上，由于代码过多，一次clone并不适合整体下载。需要分散成子模块更新。
创建一个同步其他仓库的自动操作 一层包含二层，三层子模块，部署在托管服务器上，需要时再使用git submodule 同步
二层，三层。尽在需要修改，新增，删除时从托管中心下载和上传相应代码。
功能代码，通过代码运行，同步不同git仓库的代码更新
资源的合理备份 资源随便保存一下，如果无法搜索和找到就跟没有备份没区别，因为混乱的备份会让有价值的内容淹没在无用代码海洋里。</description>
    </item>
    
    <item>
      <title>2020 07 03继承</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020070313.html</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020070313.html</guid>
      <description>尧舜禹 尧舜禹时代的禅让并非基于血缘或亲情等甚至道德人品等人为因素判断，尽管有些认为是他们同属黄帝血脉，或者是前任考察继承人德行行为做出来的。远古时期，由于人的活动范围极度有限，一个地区随便找找都有血缘关系，而且生活条件有限，血缘关系并无法有效决定部族权力。最根本的原因是他们本身已经是某部族颇有权力的领袖，全部族的帝王是他们彼此竞争的结果，禅让只是由于前任实力衰退，被实力激增的继承者所威胁，缺乏更多政治手段而进行的政治妥协。
帝王是很难决定继承者的，秦始皇不能，汉武帝，唐高祖，宋太祖，明太祖都在继承者的选择上出现致命问题。帝位继承不是因为血缘亲情，而是因实力，政治，军事等权力因素。继承者只有具有这些，帝位继承才成功。</description>
    </item>
    
    <item>
      <title>2020 07 02理念</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020070201.html</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020070201.html</guid>
      <description>理念 我是没有义务将自己的认识分享出来的，为什么？因为价值理论下，获得不了价值是没有动力去做这件事的。
为什么我要分享？因为分享是为了交流、探讨，辩证，不断完善。所以，正确的知识是天然需要分享出来的。
价值差 是人的认知的驱动力。人的认知以及很多行为只有在出现价值差的情况下才会变动。没有价值差，人的认知只能停滞到静态状态。
学习 潜在的高收益促进人类渴望未来的高价值，才有动力学习。没有潜在高收益是无法促进学习的
人的认知是有限，世界无限，
疫苗的原理， 通过小的接触，促进大的理论认识，从而提升认知</description>
    </item>
    
    <item>
      <title>进步是无法回头的</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020070283.html</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020070283.html</guid>
      <description>理念2 进步是无法回头的
远古时期，人类狩猎一点受伤就可能感染而死，被毒虫毒蛇攻击几乎必死无疑。冬天冻死夏天热死，天气太干就大旱，天气湿润水涝。
而这些问题现在都得到了很好解决。承认细菌病毒，带来了大瘟疫仍时有发生。人类不再跳大神，祈祷等死。而是发现，控制致病蔓延。
人类文明的进步，从来不会离开人类的本性，傲慢和偏见是人类本性，事实上偏见无处不在。歧视某有色人种，歧视外地人，歧视异性，歧视残疾人。无论是西方东方主流价值都在讲歧视不对。但歧视依然存在。
问题在于这些价值观都在要求，强迫，影响他人。我认为歧视不合适，所以就得要求你和其他人不要歧视（按我认为的价值观）。事实上，这本身就是一种歧视。因为行为人本身就把对象当成特殊对待。
某一个断了一个胳膊，所以，我们要处处照顾他，毕竟断了一个胳膊确实做不好事。但是！你怎么就认为别人缺一个胳膊就做不好事？他要不要因为缺少一个胳膊就被别人整天另眼相待？
这些本身属于个体的认知跟其他人不同，且行为争议很大。不迫害不攻击就是对这种行为很仁慈的态度，不要妄想得到社会公认。把这些东西合法化更是滑天下之大稽。一味的包容甚至纵容对社会无易，甚至有害。
伪科学，迷信，阴谋论等等，
用户在A家平台上不断宣传B家好，如果A认为这是广告，营销而A没兴趣接受对B的营销。那么A是有理由拒绝关于B的任何信息，这是A的自由。而用户在A平台也可以投诉A的问题，这是用户自由。同样B平台也有拒绝A的自由，这是B的自由。用户也有选择A或B的自由。</description>
    </item>
    
    <item>
      <title>奇妙的空间</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020063011.html</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020063011.html</guid>
      <description>奇异博士的时间旅行装置塔迪斯 伪装成20世纪50年代英国警亭的时间机器塔迪斯（TARDIS，即”Time And Relative Dimension(s) In Space“的缩写）拥有神奇的特质：从外边看是一个警亭。里面空间却非常大。
互联网模型 通过一个浏览器，一根网线或一个wifi信号就可以连接全世界网络信息。通过一个网站，一个app就可以浏览到无数图书，视频，音乐等等。
一个网址就成就一家跨国公司，无数商品，全球的信息连接。信息技术也想神秘博士的塔迪斯那样奇妙。
互联网应用的异类 本质上互联网的信息可以通过一个简单网址，应用，就可以轻松获取海量信息。然而，某些产品和设计将互联网信息复杂化，封闭化。广告，营销，限制，跟踪等等。
这些异类既不是为了信息的安全可靠，也不是为了效率和速度。仅仅是为了推广商业价值，在开放的互联网海洋里攫取利益。
为了有限投放广告，他们用大量技术触发，投放，验证防屏蔽。为了推广产品，要求用户验证，注册，下载应用。
为了自己的标准要求用户，验证登录，密码，安装验证应用。
差异 美国人研发产品，发表标准，靠规范和协议赚钱
日本人研发产品，封闭产品，自产自销，靠独一无二的技术标准赚钱
把任何产品当成资本工具，把用户当韭菜，利用各种手段压榨。
资本垄断 小到一个微信产品，大到一个公司。目前的互联网产品越来越展现出一种资本垄断的味道。百度一下，大量的广告迎面而来，打开个页面，广告之后，提示你下载app，app要各种权限，各种充值。问题不在于这些资本运作，问题在于用户没得选！
ios安装应用要到应用市场，而应用市场严格区分地区，自有政策等等。跟苹果公司的理念冲突？app下架，你就无法安装到手机上。纵然是持有开放精神的安卓，应用下载也要强制连接到应用市场，而安卓应用市场google palyer国内打不开？一个应用而已，如果时应用服务商服务无法链接也就罢了，怎么安装这个应用也要转到千里之外的谷歌服务器上下载？类似的还有开源应用，已经形成了一种莫名其妙的默契，开源应用只在github上发布。哪怕是几百M的release程序也要往github上放。</description>
    </item>
    
    <item>
      <title>最后生还者2</title>
      <link>https://pub.oribos.cn/web/note/2020/2020062907.html</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020062907.html</guid>
      <description>游戏剧情 前作，主角在拯救世界和小女孩生命的选择中，选择了拯救小女孩生命。
这一作，制作主把小女孩描述成抽大麻，搞百合，
各类无语 上作主角莫名其妙被杀
还要操作凶手，经历她的生活经历
女主角莫名其妙放弃复仇
游戏严格保密，游戏评测机构给出评价离谱,对剧情争议只字不提
玩家差评如潮</description>
    </item>
    
    <item>
      <title>迅雷下载</title>
      <link>https://pub.oribos.cn/web/note/2020/2020062701.html</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020062701.html</guid>
      <description>下载服务做不好 一个简单的程序，无法下载
无法暂停，停止
广告服务少不了 付费会员？广告也跑不掉 </description>
    </item>
    
    <item>
      <title>RESTful</title>
      <link>https://pub.oribos.cn/web/note/2020/2020062217.html</link>
      <pubDate>Mon, 22 Jun 2020 16:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020062217.html</guid>
      <description>通俗的语言解释REST，以及RESTful 看Url就知道要什么 看http method就知道干什么 看http status code就知道结果如何
RESTful service是一种架构模式，近几年比较流行了，它的轻量级web服务，发挥HTTP协议的原生的GET，PUT，POST，DELETE。 REST模式的Web服务与复杂的SOAP和XML-RPC对比来讲明显的更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务进行图书查找；雅虎提供的Web服务也是REST风格的。REST 并非始终是正确的选择。 它作为一种设计 Web 服务的方法而变得流行，这种方法对专有中间件（例如某个应用程序服务器）的依赖比基于 SOAP 和 WSDL 的方法更少。 在某种意义上，通过强调URI和HTTP等早期 Internet 标准，REST 是对大型应用程序服务器时代之前的 Web 方式的回归。 使用REST的关键是如何抽象资源，抽象得越精确，对REST的应用就越好。
REST服务关键原则：
1.给一切物体一个ID
2.连接物体在一起
3.使用标准方法
4.资源多重表述
5.无状态通信</description>
    </item>
    
    <item>
      <title> 2020 06 22 网站备案的疑惑</title>
      <link>https://pub.oribos.cn/web/note/2020/2020062203.html</link>
      <pubDate>Mon, 22 Jun 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020062203.html</guid>
      <description>ICP备案 《互联网信息服务管理办法》指出互联网信息服务分为经营性和非经营性两类。国家对经营性互联网信息服务实行许可制度；对非经营性互联网信息服务实行备案制度。未取得许可或者未履行备案手续的，不得从事互联网信息服务 。 《非经营性互联网信息服务备案管理办法》于2005年3月20日起施行。办法指出在中华人民共和国境内提供非经营性互联网信息服务，应当依法履行备案手续。未经国家机关单位许可备案，不得在中华人民共和国境内从事非经营性互联网信息服务。
问题点 CDN 内容
服务器拥有多个ip地址，经常变动。且完全不固定，随时扩充变动。
当网页的内容是多地分发，全国节点更新。备案地在A处，服务器资料在全国各地，甚至还有香港节点。备案地址怎么选？
网站由多种服务器构成，表现页面由前端服务器提供，数据是存放在其他服务器或数据库的后端服务器提供。后端服务器是否需要备案？但是后端服务器不提供前端页面内容，直接url get访问并不提供具体内容。
函数计算的页面，前端页面也是由全国节点更新的函数计算实时提供。没有具体的服务器保存具体文件。托管于云服务商函数计算服务器，提供一个简单的静态页面。
直接是用对象存储服务提供http页面，没有服务器。而对象存储服务不具备固定ip地址，</description>
    </item>
    
    <item>
      <title>失误</title>
      <link>https://pub.oribos.cn/web/note/2020/2020061917.html</link>
      <pubDate>Fri, 19 Jun 2020 10:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020061917.html</guid>
      <description>在cloudflare的workers上使用Post JSON workers上的代码如下 Sends a POST request with JSON data from the Workers script. 这样就可以不使用工具就能发送post请求
async function handleRequest(request) { const init = { body: JSON.stringify(body), method: &amp;#39;POST&amp;#39;, headers: { &amp;#39;content-type&amp;#39;: &amp;#39;application/json;charset=UTF-8&amp;#39;, }, } const response = await fetch(url, init) const results = await gatherResponse(response) return new Response(results, init) } addEventListener(&amp;#39;fetch&amp;#39;, event =&amp;gt; { return event.respondWith(handleRequest(event.request)) }) /** * gatherResponse awaits and returns a response body as a string. * Use await gatherResponse(.</description>
    </item>
    
    <item>
      <title>无服务器</title>
      <link>https://pub.oribos.cn/web/note/2020/2020061902.html</link>
      <pubDate>Fri, 19 Jun 2020 10:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020061902.html</guid>
      <description>网站使用反向代理或者cdn连接oss 将网站内容从服务器存储上转移到oss里，使用nginx的反向代理访问oss内容，或者直接使用cdn连接oss。
静态页面生成使用CI程序 使用git托管的CI自动程序生成静态页面，不再在本地服务器上运行上传。
使用函数计算 使用js或云服务器商的函数计算来处理一些资源请求，将内容从服务器上剥离。
数据库 仅在需要数据库和其他数据运算的情况下使用服务器，
无服务器函数生成二维码 QR 码生成器</description>
    </item>
    
    <item>
      <title>各种设计</title>
      <link>https://pub.oribos.cn/web/note/2020/2020061801.html</link>
      <pubDate>Thu, 18 Jun 2020 08:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020061801.html</guid>
      <description>各种奇葩设定和故障-1 密钥要求过分： 因为对这类不熟悉的服务，并不可能第一次就是用一个跟自己已有密码类似的强密码。这种直接要求用户提供强密码的行为相当让人怀疑其目的。
注册时候密码要求不严，第一次登陆就要重置密码。
明明usr/local目录下有次文件，直接是用却无法找不到文件。说白了：瞎。
使用了登陆验证，奈何登陆验证服务器无法访问。导致验证信息不可用，无法登陆。
hexo初始化时非要自己下载一个主题，而这个主题迟迟下载不下来，类似的hugo初始化就不需要可以做到快速初始化。hexo但用户操作的第一步就慢别人一步。 由于ssh证书权限不是600，就无法使用。这种要求太武断。
非要去要求用户的邮箱服务，属于强盗行为。这些被他们认为都qq 163成了他们服务的基本要求。类似的要求如果使用手机号注册，非要你用电信手机号或移动手机号，不知道用户心里会怎么想 此处，并不是说只支持国内手机号有什么不对，你入口处有其他手机号的选项，结果却不能用。放那里充门面的吗？
手机上选择文字是一种折磨：
密码要求过分： 因为对这类不熟悉的服务，并不可能第一次就是用一个跟自己已有密码类似的强密码。这种直接要求用户提供强密码的行为相当让人怀疑其目的。
注册时候密码要求不严，第一次登陆就要重置密码。
明明usr/local目录下有次文件，直接是用却无法找不到文件。说白了：瞎。
使用了登陆验证，奈何登陆验证服务器无法访问。导致验证信息不可用，无法登陆。
hexo初始化时非要自己下载一个主题，而这个主题迟迟下载不下来，类似的hugo初始化就不需要可以做到快速初始化。hexo但用户操作的第一步就慢别人一步。 由于ssh证书权限不是600，就无法使用。这种要求太武断。
非要去要求用户的邮箱服务，属于强盗行为。这些被他们认为都qq 163成了他们服务的基本要求。类似的要求如果使用手机号注册，非要你用电信手机号或移动手机号，不知道用户心里会怎么想 此处，并不是说只支持国内手机号有什么不对，你入口处有其他手机号的选项，结果却不能用。放那里充门面的吗？
手机上选择文字是一种折磨：
第二期</description>
    </item>
    
    <item>
      <title>2020061702</title>
      <link>https://pub.oribos.cn/web/note/2020/2020061702.html</link>
      <pubDate>Wed, 17 Jun 2020 10:18:59 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020061702.html</guid>
      <description>在coding构建计划里，将文件推送到服务里。 def remoteConfig = [:] remoteConfig.name = &amp;#34;my-remote-server&amp;#34; remoteConfig.host = &amp;#34;${env.REMOTE_HOST}&amp;#34; remoteConfig.allowAnyHosts = true // 使用 SCP 作为文件传输 remoteConfig.fileTransfer = &amp;#34;scp&amp;#34; pipeline { agent any stages { stage(&amp;#39;检出&amp;#39;) { steps { checkout([ $class: &amp;#39;GitSCM&amp;#39;, branches: [[name: env.GIT_BUILD_REF]], userRemoteConfigs: [[ url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID ]]]) } } stage(&amp;#39;更新子模块&amp;#39;) { steps { dir(&amp;#39;./content/zh&amp;#39;) { sh &amp;#39;rm -rf ./note&amp;#39; sh &amp;#39;git clone https://${B_USER}:${B_TOKEN}@${NOTE_GIT}&amp;#39; } dir(&amp;#39;./content/zh&amp;#39;) { sh &amp;#39;rm -rf ./lambda&amp;#39; sh &amp;#39;git clone https://${B_USER}:${B_TOKEN}@${LAMBDA_GIT}&amp;#39; } } } } } node { withCredentials([sshUserPrivateKey( credentialsId: &amp;#34;${env.</description>
    </item>
    
    <item>
      <title>nodejs笔记</title>
      <link>https://pub.oribos.cn/web/note/2020/2020061613.html</link>
      <pubDate>Tue, 16 Jun 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020061613.html</guid>
      <description>nvm 版本切换 nodejs版本管理工具，切换多个nodejs版本
前端js和nodejs区别 ECMAScript 语法，规范 不能处理，操作等动作，没有实际动作。
js ES语法规范＋webAPI 完成浏览器端的实际操作
nodejs 使用ES语法规范+nodejs语法规范
完成服务器端的实际操作
先用原生代码，后用框架 nodejs后端 server开发和前端开发的区别
思维区别
server稳定性，对内存cpu要求，日志记录
server安全，集群和服务拆分
前端内容只是一个客户端运行，独占一个浏览器，设备内存CPU消耗。
stream写日志，使用redis pm2进程守候，
日志
安全</description>
    </item>
    
    <item>
      <title>操作逻辑</title>
      <link>https://pub.oribos.cn/web/note/2020/2020061607.html</link>
      <pubDate>Tue, 16 Jun 2020 09:01:40 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/note/2020/2020061607.html</guid>
      <description>上传之前先删除 sh &amp;#39;rm -rf ./note&amp;#39; sh &amp;#39;git clone https://${B_USER}:${B_TOKEN}@${NOTE_GIT} 学习方法 使用熟悉的，简单的方法构建出来简单成品 使用基础的知识分析成品中的片段 使用基础的知识重构简单成品 使用简单的知识构建组件 使用组件，框架，成熟方案构建复杂成品 构建阶段 先搭设框架 额外工程，其他框架外功能再构建其他框架 框架内组件，逐渐完善 存储跟服务器分开 为了防止服务器被攻击是导致故障，网络受限等情况影响页面访问。用于前端页面访问的http服务和网站内容存放分开。
当 http服务器受到攻击，损坏，故障时，页面仍然可以使用。
页面存放在oss，cos，或其他服务商的对象存储，数据存储等服务上。在http服务器上做反向代理以提供http服务。</description>
    </item>
    
    <item>
      <title>2020 06 15 子模块故障</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020061511.html</link>
      <pubDate>Mon, 15 Jun 2020 10:18:03 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020061511.html</guid>
      <description>子模块经常莫名其妙提示错误 改变使用方式 使用子模块，在不同的CI环境下会出现不确定的问题，所以，子模块的使用上做修改。
在CI里删除 子模块 的目录，重新git clone 文件到该目录。
github错误 </description>
    </item>
    
    <item>
      <title>2020 06 14 全面搬出github</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020061413.html</link>
      <pubDate>Sun, 14 Jun 2020 15:26:21 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020061413.html</guid>
      <description>github的下载和访问都极慢 github下载和访问页面都非常慢，严重影响了使用github的效率。将部分github上的仓库搬到国内托管中心。
之前第一次从github搬出 由于下载速度慢，之前进行过一次从github搬出，后来使用github的actions，就将部分执行的源代码试验性质的搬回github
第二次从github搬出 第一次由于使用acitons，将测试代码搬到github。运行。景观github在运行npm下载和部分actions市场的应用是速度很快，但git仓库本身的同步太慢。仍然不适合使用。
由于在coding和jenkins的持续集成使用，原本在github上运行的ci任务被取消。第二次搬出github</description>
    </item>
    
    <item>
      <title>2020 06 14 减少自定义</title>
      <link>https://pub.oribos.cn/web/docs/2020/20200614337.html</link>
      <pubDate>Fri, 12 Jun 2020 20:25:20 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/20200614337.html</guid>
      <description>使用主流框架 减少使用自己定义的内容，主流框架能实现的东西一般采用框架。尽可能遵循规范和更广范围的通用规则。</description>
    </item>
    
    <item>
      <title>2020 06 14 烦人的验证</title>
      <link>https://pub.oribos.cn/web/docs/2020/2020061407.html</link>
      <pubDate>Fri, 12 Jun 2020 20:25:20 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/2020061407.html</guid>
      <description>cloudflare点击各类图片验证 图片乱七八糟，数量不定，各类奇葩的验证。cloudflare的奇葩的验证让人反感。
密码复杂程度要求不一 各类网站注册时对用户的密码复杂程度要求不一，有的必须有大小写，有的必须有符号，有的长度多少位。必要的复杂程度无可厚非，但是某些奇葩的跟大多数要求不一样的要求让让人反感。因为某些不熟悉的网站，不想让使用自己常用的密码，而这些网站还非要打肿脸充胖子要求高级别密码。导致，有的网站注册以后再登就很难记得密码。
安全验证 用户不关心你网站的安全验证，而且你网站的安全验证还不能让人反感。大部分情况网站为了验证安全，使用那种多次打扰用户使用的方法验证用户，或者各类限制用户。这属于一种极度不合理。
把关键操作藏起来 随便点击迅雷页面都要求续费，充值，开通会员。而迅雷把退订，终止服务藏的严严实实。新手不去搜索几乎不可能找到退订入口。</description>
    </item>
    
    <item>
      <title>2020 06 12 试验项目</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006122.html</link>
      <pubDate>Fri, 12 Jun 2020 10:24:03 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006122.html</guid>
      <description>目标 页面显示最近更新，内容引用资源页面，即时更新。
更新的内容以方框，类似微博的页面一样推送。
测试文档 </description>
    </item>
    
    <item>
      <title>2020 06 11 Coding构建计划</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006112.html</link>
      <pubDate>Thu, 11 Jun 2020 15:25:37 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006112.html</guid>
      <description>coding构建计划：初见 代码 本站点使用coding的构建计划自动部署，代码如下：
pipeline { agent any stages { stage(&amp;#39;检出&amp;#39;) { steps { checkout([ $class: &amp;#39;GitSCM&amp;#39;, branches: [[name: env.GIT_BUILD_REF]], userRemoteConfigs: [[ url: env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID ]]]) } } stage(&amp;#39;npm&amp;#39;) { steps { sh &amp;#39;npm init -y&amp;#39; sh &amp;#39;npm install -D --save autoprefixer&amp;#39; sh &amp;#39;npm install -D --save postcss-cli&amp;#39; } } stage(&amp;#39;hugo&amp;#39;) { steps { sh &amp;#39;wget https://github.com/gohugoio/hugo/releases/download/v0.72.0/hugo_extended_0.72.0_Linux-64bit.tar.gz&amp;#39; sh &amp;#39;tar -zxvf hugo_extended_0.72.0_Linux-64bit.tar.gz&amp;#39; sh &amp;#39;./hugo&amp;#39; } } stage(&amp;#39;未命名阶段&amp;#39;) { steps { echo &amp;#39;构建中.</description>
    </item>
    
    <item>
      <title>2020 06 10 又一次改变文件结构</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020061037.html</link>
      <pubDate>Wed, 10 Jun 2020 11:23:17 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020061037.html</guid>
      <description>质数表 本网站用于内容页面的url地址，并不是采用xxxx年xx月xx日xxx的顺序，尽管确实是20200610按照日期排序，结果的数字是按照以下的质数表来排序的：
规则1： 即某天第一篇文章或某类型的第一个序列为2，第二位是3，第三位是5</description>
    </item>
    
    <item>
      <title>2020 06 10 Git分支管理</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020061031.html</link>
      <pubDate>Wed, 10 Jun 2020 08:36:22 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020061031.html</guid>
      <description>git分支管理 查看电脑B本地仓库的分支
git branch
查看本地和远程仓库的所有分支
git branch -a
查看远程仓库的分支
git branch -r
同步远程分支
git fetch 将本地分支与远程保持同步
git checkout -b 本地分支名x origin/远程分支名x 拉取远程分支并同时创建对应的本地分支
将本地所有分支与远程保持同步 git fetch &amp;ndash;all
git merge master
git 的子模块更新 git submodule foreach &amp;lsquo;git pull origin master&amp;rsquo;</description>
    </item>
    
    <item>
      <title>2020 06 19 kor</title>
      <link>https://pub.oribos.cn/web/docs/2020/note/2020061971.html</link>
      <pubDate>Tue, 09 Jun 2020 02:22:55 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/docs/2020/note/2020061971.html</guid>
      <description>将库尔里斯的故事公开 讲述一个遥远宇宙的故事
艾拉族和库尔族在宇宙的故事</description>
    </item>
    
    <item>
      <title>2020 06 08 改变的阻力</title>
      <link>https://pub.oribos.cn/web/value/2020/202006087.html</link>
      <pubDate>Mon, 08 Jun 2020 18:30:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/value/2020/202006087.html</guid>
      <description>力改变物体运动状态 保持物体运动状态不需要费力 改变是存在阻力的 高处没有危险，危险的是从高处落下 没有外力影响，物体状态不会改变 </description>
    </item>
    
    <item>
      <title>多个仓库链接</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006083.html</link>
      <pubDate>Mon, 08 Jun 2020 18:13:08 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006083.html</guid>
      <description>内容单独放一个仓库 之前在没有布置自动部署的时候，就是将content单独放到一个仓库，使用git submodule 命令引用和更新。后来需要配置自动部署，就把所有内容，均保存到仓库，一起推送到github。
包括主题和content内容，一共有 主题docsy文件夹，vendor目录下的bootstrap和Font-Awesome文件，均采用git子模块的形式链接到git仓库的。
随着自动部署完成，是时候恢复这些子模块单独更新了。
对于bootstrap和font-Awesome文件应该引用web地址 不清楚为什么docsy主题需要将这两个资源单独保存使用，主题使用了scss和postcss等配置，或许跟这些文件有联系。
事实上由于docsy主题的样式过于复杂，有时候真考虑换一个主题使用。
取消自建git wercker 和Azure DevOps </description>
    </item>
    
    <item>
      <title>2020 06 07 命名规范</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006077.html</link>
      <pubDate>Sun, 07 Jun 2020 22:11:17 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006077.html</guid>
      <description>命名规范 仓库类 dev.XXX dev作为临时，开发，测试的仓库标识
-作为url使用时资源的连接符 .作为名称的连接符
app.xxx 正式使用的资源
sub.xxx 需要内容分发时，源内容的标识
kit.xxx 服务，工具，应用，附件资源标识，
git仓库 ra-gh-xx
由于命名修改导致的旧资源链接丢失 由于自己的频繁修改命名规范导致旧链接丢失，实属费力不讨好。但科技在进步，方法在更新，必要的革故鼎新是必要的。</description>
    </item>
    
    <item>
      <title>2020 06 07 Hugo持续集成</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006071.html</link>
      <pubDate>Sun, 07 Jun 2020 18:20:21 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006071.html</guid>
      <description>通过github actions 发布 使用代码：
name: Deploy to GitHub Pages on: push:	branches:	- master jobs: deploy: name: Deploy to GitHub Pages runs-on: ubuntu-latest steps: - name: 1. git checkout... uses: actions/checkout@v1 - name: 2. setup nodejs... uses: actions/setup-node@v1 - name: 3 run postcss run: | npm install -D --save autoprefixer npm install -D --save postcss-cli - name: Setup Hugo uses: peaceiris/actions-hugo@v2.2.2 with: hugo-version: &amp;#39;latest&amp;#39; extended: true - name: Build run: hugo --minify - name: deploy uses: s0/git-publish-subdir-action@master env: REPO: git@github.</description>
    </item>
    
    <item>
      <title>2020 06 05 发布到阿里云oss</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020060517.html</link>
      <pubDate>Fri, 05 Jun 2020 17:06:53 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020060517.html</guid>
      <description>###通过以下代码将github内容发布到oss
位于.github/workflows/main.yml
name: MainWorkflow on: [push] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - uses: actions/setup-node@v1 with: node-version: &amp;#34;12.x&amp;#34; - uses: manyuanrong/setup-ossutil@v1.0 with: # endpoint 可以去oss控制台上查看 endpoint: &amp;#34;oss-cn-zhangjiakou.aliyuncs.com&amp;#34; # 使用我们之前配置在secrets里面的accesskeys来配置ossutil access-key-id: ${{ secrets.OSS_KEY_ID }} access-key-secret: ${{ secrets.OSS_KEY_SECRET }} - name: Deply To OSS run: ossutil cp ./public oss://hb-kit-t7/ -rf 在github上运行持续集成 自动使用hugo生成public
name: Deploy Hugo Site to Github Pages on Master Branch on: push: branches: - master jobs: build-deploy: runs-on: ubuntu-18.</description>
    </item>
    
    <item>
      <title>2020 06 05 Github</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020060513.html</link>
      <pubDate>Fri, 05 Jun 2020 00:37:14 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020060513.html</guid>
      <description>github不支持英文以外的语言 github本身希望看到结果肯定是越来越多的人将开源代码托管在github上，全世界9%的代码和注释就是用英文写的，对于程序员来说，尝试通过英语交流比其他行业更常见，另外这样才能打破语言限制，让更多的人能够享受到不同国家的开源代码。
看上去没问题 Github是国际化的社区，全世界的人都用英文交流。看上去似乎没问题，但是，是谁认定全世界必须使用英文交流？而且哪怕是英文，由于全球地区的差异，某些地区用词和组合还是有差异的。
另一方面，作为一个国际化的git托管中心，必然会存放语言，数学，工程技术，医疗，建筑等等多方面的文档和程序。哪怕是编程一类也有java，go，python等等多种编程语言，外行看了也很难看懂。也就是说阻碍全世界各行各业交流的因素的极多的，语言的差异只是一个方面。
关键不在于语言，而在于分享。如果一个复杂的专业的应用能有详细的技术文档，无论整个技术文档是什么语言，总会有人阅读，翻译，转载，传播。总会由英文变成法文，日文，中文等等。根本不缺本土语言。只有那些冷门，不完善，欠缺的，开发人员也极少维护，极少完善的项目，接触的人寥寥无几，才无法很好传播。
github的actions 一、GitHub Actions 是什么？ 持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。
很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。
如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。
GitHub 做了一个官方市场，可以搜索到他人提交的 actions。
上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用userName/repoName的语法引用 action。比如，actions/setup-node就表示github.com/actions/setup-node这个仓库，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 github.com/actions 里面。
既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见官方文档。
二、基本概念 GitHub Actions 有一些自己的术语。
（1）workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。
（2）job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。
（3）step（步骤）：每个 job 由多个 step 构成，一步步完成。
（4）action （动作）：每个 step 可以依次执行一个或多个命令（action）。
三、workflow 文件 GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.</description>
    </item>
    
    <item>
      <title>安装和部署hugo</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006045.html</link>
      <pubDate>Thu, 04 Jun 2020 10:31:33 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006045.html</guid>
      <description>快速开始 按照以下步骤，可以快速运行一个简单的博客，但没有任何内容的。
# ubuntu sudo apt install hugo #安装hugo hugo new site blog #使用hugo创建一个博客站点，名称blog cd blog #进入博客站点blog hugo # 运行hugo构建blog站点 以上命令就是一个简单的hugo站点的基本操作，但是运行完成以后，你得不到任何页面，因为没有为博客创建主题、配置站点、和新建文章 。
如果你只想做一个简单的博客页面，可以通过上面链接到相应位置配置即可。而如果你需要使用特定的复杂的主题，就需要重新开始安装和配置hugo。
👇 下面的步骤需要你卸载快速安装的正式版hugo，因为下面例子所用的主题时扩展版hugo
安装hugo 安装扩展版hugo，需要提前安装go语言环境，同时推荐安装git，因为某些复杂的主题可能需要使用git子模块的形式引用配置文件。有些主题需要使用npm。
安装go 语言 安装git （可选） 安装npm （可选） 安装hugo 版本区别 hugo分为正式版和扩展版两种，后者支持scss postcss等CSS预处理器文件。
下载和安装 hugo_extended_0.72.0_Linux-64bit.tar.gz
下载文件 wget https://github.com/gohugoio/hugo/releases/download/v0.72.0/hugo_extended_0.72.0_Linux-64bit.tar.gz tar -zxvf hugo_extended_0.72.0_Linux-64bit.tar.gz # 解压缩文件包 cp ./hugo /usr/local/bin/ # 将hugo复制到系统目录下，以直接运行hugo命令 hugo verison # 查看版本，验证安装是否正确。 hugo releases
配置文件 运行
hugo new site blog 创建blog目录
下载主题 以安装hugo-meme主题为例
cd blog cd themes git clone https://github.</description>
    </item>
    
    <item>
      <title>2020 06 04 分栏显示</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006043.html</link>
      <pubDate>Thu, 04 Jun 2020 09:51:23 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006043.html</guid>
      <description> </description>
    </item>
    
    <item>
      <title>2020 06 04 网站前端内容</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006041.html</link>
      <pubDate>Thu, 04 Jun 2020 09:02:11 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006041.html</guid>
      <description>前端是技术大杂烩 在md文件里使用div做两边的分栏显示 前端产品属于消耗品 </description>
    </item>
    
    <item>
      <title>多个ssh证书</title>
      <link>https://pub.oribos.cn/web/deploy/2020/20200603%E5%A4%9A%E4%B8%AAssh%E8%AF%81%E4%B9%A6.html</link>
      <pubDate>Wed, 03 Jun 2020 09:09:55 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/20200603%E5%A4%9A%E4%B8%AAssh%E8%AF%81%E4%B9%A6.html</guid>
      <description>在linux上使用多个ssh证书 如果你已经有了一套名为 id_rsa 的公秘钥，将要生成另外一个公钥，比如 aysee ，你也可以使用任何你喜欢的名字。
步骤如下：
1、生成一个新的自定义名称的公钥：
ssh-keygen -t rsa -C &amp;#34;YOUR_EMAIL@YOUREMAIL.COM&amp;#34; -f ~/.ssh/aysee 执行命令后，生成命名的公钥和生成默认公钥的步骤一样。 执行完成后，会在 ~/.ssh/目录下生成一个 aysee 和 aysee.pub 文件。
2、在 SSH 用户配置文件 ~/.ssh/config 中指定对应服务所使用的公秘钥名称，如果没有 config 文件的话就新建一个，并输入以下内容：
Host github.com www.github.com IdentityFile ~/.ssh/aysee 3、添加 aysee.pub 到你的git服务器网站上。
4、测试配置文件是否正常工作
ssh -T git@gitcafe.com 如果，正常的话，会出现如下提示：
Hi USERNAME! You&amp;#39;ve successfully authenticated, but github does not provide shell access. 如果出现如下提示，则说明有权限问题：
Permission denied (publickey) 如果有权限问题的情况下，你对项目执行push操作的时候，会得到如下提示：
Warning: Permanently added the RSA host key for IP address &amp;#39;192.30.252.129&amp;#39; to the list of known hosts.</description>
    </item>
    
    <item>
      <title>Git子模块</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006023.html</link>
      <pubDate>Tue, 02 Jun 2020 17:16:53 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006023.html</guid>
      <description>将重要资料作为子模块 将网站的content,layout作为子模块单独同步到git仓库，这样在其他电脑上操作文章和配置文件时，就不需要同步所有文件。
对content内容修改删减以后，执行git push，然后再在发布的电脑上执行git pull
主题配置的子模块 docsy主题都bootstrap和font awesome是通过子模块，直接在github上更新的。</description>
    </item>
    
    <item>
      <title>2020 06 01 戳穿谎言</title>
      <link>https://pub.oribos.cn/web/value/2020/2020/202006013.html</link>
      <pubDate>Mon, 01 Jun 2020 15:16:36 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/value/2020/2020/202006013.html</guid>
      <description>迈克尔纽顿灵魂之旅 无意间在B站看到介绍迈克尔纽顿灵魂之旅的视频，对里面将的荒诞无稽的东西感觉可笑。
作者的信仰局限性 迈克尔纽顿灵魂之旅讲述的内容，很多都是跟西方的信仰贴合很紧密，灵魂分三六九等，轮混带有不同光环的导师，对自杀的惩罚等等。
倒不说这里面的真或假，就比如什么带有不同光环的灵魂。都到了灵魂世界了，谁规定某某颜色就高级，某某颜色就此等？灵魂有没有自己的喜好某个特定颜色，能不能自己改变自己喜好的颜色？如果不能？就意味着灵魂没有自己选择的自由，如果能，那颜色何以成为等级的象征？或者说自己光环颜色纯属自嗨，别的灵魂感觉不到？为什么要强调颜色差异？因为人类社会的痛苦就在于自我和其他的差异化。有些人容得下自己同别人的差异，有些人容不下差异，就区分了政治上的左于右，极端和保守。假如存在灵魂世界，依然存在差异化，那必然像人类社会一样复杂，矛盾，痛苦。更何况， 迈克尔纽顿灵魂之旅描述的内容确实存在等级不同的阶级的差异化。
奇怪的西方思维 欧洲最早的古文明两河文明、希腊罗马文明，悠久灿烂的文明成就，后来发展出来的欧洲民族有罗马人，日耳曼人凯尔特人、斯拉夫人都在自己的地区发展了自己的文明和历史。直到公元1世纪。接触到了莫名其妙的基督教，突然古老的北欧神话，希腊神话都消失不见。转而变成了诺亚方舟，亚当夏娃，天使撒旦。而现在信奉的宗教，拙劣的敛财工具“赎罪券”，愚昧无知的“地平论”等等，这个宗教从来不缺阻碍人类文明发展的手段。</description>
    </item>
    
    <item>
      <title>2020 06 01 Hugo的配置文件</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202006011.html</link>
      <pubDate>Mon, 01 Jun 2020 10:43:07 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202006011.html</guid>
      <description>遇到的问题 由于github pages经常访问慢，甚至无法访问，coding也是隔三差五出访问异常，我需要部署多个pages源站点做到多站点同步。而在gitlab上部署时遇到了问题：
这里以普通情况为主，github和coding可以将整个站点发布到pages上，Netlify同样可以直接使用github站点。唯独gitlab跟其他都不一样需要将站点内容放到public文件夹里，配置文件放根目录。
而问题在于，由于我没有使用持续集成的方式，而采用极其原始的直接将public 推到git上部署页面。使得网站配置文件同pages文件是不同的git仓库，而网站配置文件的git仓库是直接将public文件夹屏蔽掉的。所以，一个仓库里有配置文件但没有public，一个仓库里有所有页面但是不在public里。
为什么如此？ 如果采用持续集成的方式部署页面，就解决了很多问题，而由于自己强迫症的问题，一个页面是发布到多个平台，甚至有aws s3，阿里云oss等等。既要在不同的git仓库上配置持续集成，又希望所有站点内容一模一样，结果就很难实现，因为serverless cloudflare workers等等需要不同的配置文件和cname。加之某些部署时的技术问题一直没有解决。不得不将public在一个地方生成，然后统一发布出去。
对github pages和gitlab pages不同的解决 运行hugo 时，加上参数 -d xxxx
xxxx 为目录名 就可以代替public目录名
production生产版本 在hugo根目录下创建config文件夹，将原来的config.toml转到到这个目录下，作为hugo的配置文件目录
创建 _default 文件夹，config.toml文件
config.toml 存放hugo的默认配置文件，运行hugo时生成public文件夹（可以通过publishDir = &amp;quot;目录名&amp;quot;修改）
创建 production 文件夹，config.toml文件，增加publishDir = &amp;quot;目录名&amp;quot; 在运行hugo时生成public文件夹和另一个目录,
这个production就是hugo使用配置文件新建的生产版内容，可以通过配置production 文件夹的config.toml文件，设置某些正式发布的内容。
这个publishDir = &amp;quot;目录名&amp;quot; 的目录名可以是hugo根目录下的子目录目录/子目录
staging 试验版本 通过在config文件夹下，新建staging文件夹
通过运行hugo --environment staging生成临时测试版本。</description>
    </item>
    
    <item>
      <title>2020 05 28 Md单换行变双换行</title>
      <link>https://pub.oribos.cn/web/deploy/2020/202005281.html</link>
      <pubDate>Thu, 28 May 2020 20:24:12 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/202005281.html</guid>
      <description>md文档换行需要两个换行符 由于md文档识别文字换行需要两个换行符，当我们引用（或者抄袭）html，txt，doc等文档时，直接复制到md文档里并不会出现换行效果。
如何解决？
1 找到一个在线markdown生成工具，将需要复制的文件选中复制到源文件里
2 下载这个markdown生成工具所生成的html文档。（不要生成的md文件，只要html文档）
3 使用编辑器打开html文档，使用替换功能，选择&amp;lt;br&amp;gt; 替换为&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
4 将替换后的html文档保存为.md格式，在阅览md文档 的节目选中md文档。
这样你所使用的md源文件就从一个换行变成了2个换行，这样的文档经过hexo，hugo处理后就会显示正确的页面效果。
将小说分段， 搜索小说分节的关键字 第XX节或第XX章，你只需要搜索关键字 章 或 卷 即关键字后加一个空格，就可以自动搜索到每个章节的标题处。</description>
    </item>
    
    <item>
      <title>2020 05 26 新版本</title>
      <link>https://pub.oribos.cn/web/blog/2020/note/2020052601.html</link>
      <pubDate>Tue, 26 May 2020 17:36:49 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/blog/2020/note/2020052601.html</guid>
      <description>更换主题 尽管原来的主题hugo-meme 非常好用，但是某些样式和布局并不适合我的使用，再加上引用bootstrap时出现页面异常。将主题更换为hugo-docsy。并且此主题取代过去的单页专用模板Hugo-Primer,成为唯一使用的主题。
SCSS hugo-docsy使用了scss，PostCSS等技术，对主题的修改会遇到问题。
sudo npm install -D --save autoprefixer sudo npm install -D --save postcss-cli 测试 字体 此前一直坚信在手机屏幕和电脑屏幕上使用黑体字是最方便最实用的，然而看到别人文章介绍，宋体一直是正文印刷的标准字体，适合阅读。所以将网页字体全部改为思源宋体（试用）
由于宋体笔画要比黑体细，所以字体应稍微加粗或颜色加深。
更换版本 由于配置文件改动过大，原本以为已经够完美，然而无意间发现一直都走错路了，之前修改的那么多代码都是向错的方向发展。所以，我讲源地址作为旧版，重新配置了新的文件。 主要涉及到搜索，图标配置等内容。
简化操作导致基本操作都不会了 由于过多的使用精简和多次加工的指令，基本的代码和操作生疏了。
好用的主题难以驾驭 docsy主题给的模板Knative 和 Apache Airflow ，那怕是拿到了网站的源码，也不会配置。前者兼容bootstrap，配置简单。后者就相当复杂。
内容和配置文件单独存放 所更新的文章，博客等内容，均以git子模块的形式，单独保存在一个git仓库里。修改后的主题配置文件也以git子模块的形式保存在专门的git仓库里。
这样，当改变主题或其他配置的时候，只需要重新构建hugo目录，然后引用文章的git子模块仓库里的内容就可以了。
重要的无法重构的内容应该多方面保存。
实用为主,外观为辅 网页的设计和内容发布以实用,简便为主要目的.不以外观展示为目标.尽可能的少展示不必要的,对阅读有干扰的内容.
最终内容也需要带.html 为了规整文件,即所有生成的内容页均以文件名.html文件命名,并按目录保存.这样在归档和整理的时候可以很轻松的规整有价值内容.以目录为文件名命名时,尽管url好看,但内容存放混乱,不易整理.
功能性链接不带.html 链接,跳转,目录,分类等页面以目录命名,自动在目录下生成index.html.这类文件在归档时并不以内容保存.</description>
    </item>
    
    <item>
      <title>2020 05 25 Git忽略规则(.gitignore配置）不生效原因和解决</title>
      <link>https://pub.oribos.cn/web/blog/2020/note/202005251.html</link>
      <pubDate>Mon, 25 May 2020 08:54:43 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/blog/2020/note/202005251.html</guid>
      <description>Git忽略规则(.gitignore配置）不生效原因和解决 参考文章：kevingrace
第一种方法:
.gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，或者用git status查看状态，想要忽略的文件还是显示被追踪状态。 原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的， 这时候我们就应该先把本地缓存删除，然后再进行git的提交，这样就不会出现忽略的文件了。
解决方法: git清除本地缓存（改变成未track状态），然后再提交:
# git rm -r --cached .
# git add .
# git commit -m &#39;update .gitignore&#39;
# git push -u origin master
需要特别注意的是： 1）.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。 2）想要.gitignore起作用，必须要在这些文件不在暂存区中才可以，.gitignore文件只是忽略没有被staged(cached)文件， 对于已经被staged文件，加入ignore文件时一定要先从staged移除，才可以忽略。
第二种方法:（推荐） 在每个clone下来的仓库中手动设置不要检查特定文件的更改情况。 # git update-index --assume-unchanged PATH //在PATH处输入要忽略的文件
在使用.gitignore文件后如何删除远程仓库中以前上传的此类文件而保留本地文件 在使用git和github的时候，之前没有写.gitignore文件，就上传了一些没有必要的文件，在添加了.gitignore文件后，就想删除远程仓库中的文件却想保存本地的文件。这时候不可以直接使用&amp;quot;git rm directory&amp;quot;，这样会删除本地仓库的文件。可以使用&amp;quot;git rm -r –cached directory&amp;quot;来删除缓冲，然后进行&amp;quot;commit&amp;quot;和&amp;quot;push&amp;quot;，这样会发现远程仓库中的不必要文件就被删除了，以后可以直接使用&amp;quot;git add -A&amp;quot;来添加修改的内容，上传的文件就会受到.gitignore文件的内容约束。
额外说明：git库所在的文件夹中的文件大致有4种状态
Git 状态 untracked 和 not staged的区别 1）untrack 表示是新文件，没有被add过，是为跟踪的意思。 2）not staged 表示add过的文件，即跟踪文件，再次修改没有add，就是没有暂存的意思</description>
    </item>
    
    <item>
      <title>2020 05 20 效果测试</title>
      <link>https://pub.oribos.cn/web/lambda/test/2020/202005201.html</link>
      <pubDate>Wed, 20 May 2020 16:47:51 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/lambda/test/2020/202005201.html</guid>
      <description>
颜色渐变：
.td-navbar { background: linear-gradient(90deg, rgb(247, 149, 51) 0, rgb(243, 112, 85) 15%, rgb(239, 78, 123) 30%, rgb(161, 102, 171) 44%, rgb(80, 115, 184) 58%, rgb(16, 152, 173) 72%, rgb(7, 179, 155) 86%, rgb(109, 186, 130) 100%); } background: linear-gradient(33deg, #F0F8FF,#FFFFFF); 使用浮动的方式实现页面分栏 使用bootstrap的方式 浮动实现多列 </description>
    </item>
    
    <item>
      <title>2020 05 17 代码</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020051701.html</link>
      <pubDate>Sun, 17 May 2020 09:50:33 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020051701.html</guid>
      <description>通过 Workers 在边缘运行 JavaScript、Rust、C 和 C++ 等。 一个测试代码段
async function handleRequest(request) { const init = { headers: { &amp;#39;content-type&amp;#39;: &amp;#39;text/html;charset=UTF-8&amp;#39;, }, } return new Response(someHTML, init) } addEventListener(&amp;#39;fetch&amp;#39;, event =&amp;gt; { return event.respondWith(handleRequest(event.request)) }) const someHTML = `&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;referrer&amp;#34; content=&amp;#34;origin&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;refresh&amp;#34; content=&amp;#34;1;url=http://b.hbn.pub&amp;#34;&amp;gt; &amp;lt;title&amp;gt;doc&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .loading{ width: 80px; height: 40px; margin: 0 auto; margin-top:100px; } .loading span{ display: inline-block; width: 8px; height: 100%; border-radius: 4px; background: lightgreen; -webkit-animation: load 1s ease infinite; } @-webkit-keyframes load{ 0%,100%{ height: 40px; background: lightgreen; } 50%{ height: 70px; margin: -15px 0; background: lightblue; } } .</description>
    </item>
    
    <item>
      <title>将hugo页面部署到workers</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020051401.html</link>
      <pubDate>Thu, 14 May 2020 11:01:20 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020051401.html</guid>
      <description>使用cloudflare workers 原文官方文档： workers sites
推送hugo生成的public需要使用Workers KV存储，费用每个月5美元
将域名交给cloudflare解析 添加记录 名称 b.ufs.im 内容 随便填，后续使用路由这里不会不会生效。 代理状态 已代理 保存
获取编辑workers的api令牌 在菜单-api令牌，生成自己的api令牌，通过选择编辑 Cloudflare Workers 权限和账户，生成一个应用api令牌。 这个令牌和脚本代码需要在之后操作中使用。
在本地电脑操作 Wrangler 安装Wrangler
这里的安装命令
npm uninstall -g @cloudflare/wrangler &amp;amp;&amp;amp; npm install -g @cloudflare/wrangler 报错，建议先安装cargo
curl https://sh.rustup.rs -sSf | sh cargo安装完毕后，按照提示，将cargo加入path
使用cargo安装wrangler
cargo install wrangler
在hugo项目的根目录配置Wrangler 执行Wrangler初始化
wrangler init --site workers项目名 然后将hugo根目录下的文件转移到workers项目名 （这里是否可以直接在hugo根目录下执行wrangler init 还没有测试）
编辑wrangler.toml
name = &amp;#34;workers项目名&amp;#34; type = &amp;#34;webpack&amp;#34; account_id = &amp;#34;api 账户id&amp;#34; workers_dev = false route = &amp;#34;b.</description>
    </item>
    
    <item>
      <title>2020 05 13 在workers上部署博客</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020051305.html</link>
      <pubDate>Wed, 13 May 2020 20:05:49 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020051305.html</guid>
      <description>Cloudflare workers blog Cloudflare workers + Github 实现的动态博客系统，使用边缘计算，无需服务器
Workers 是 Cloudflare 提供的边缘计算服务，原本是收费的，现在免费了，每天有 10 万次请求的免费额度。
用户可以使用 JavaScript 编写自己的程序，然后可以直接通过域名访问运行。
演示博客地址：https://blog.16lab.io/
项目地址 ：cloudflare-worker-blog
如何部署 首先在 Cloudflare 控制面板创建一个新的 workers
将 workers.js（或者 workers-sakurafrp.js） 的内容根据自己情况修改，然后替换 Cloudflare 在线编辑器的默认代码。
点击 Save and deploy 保存。
如何编写文章 首先创建一个 Github 项目，名字随意，然后将这个项目 clone 到本地。
# 示例 git clone https://github.com/kasuganosoras/cloudflare-worker-blog cd cloudflare-worker-blog/ 进入项目文件夹，新建一个 posts 文件夹
mkdir posts/ 在里面编写文章，内容一般用 .md 后缀即可，例如 helloworld.md
写完之后回到项目根目录（就是上级目录），然后新建一个 list.json
touch list.json 编辑 list.json，在里面写入以下内容
1 2 3 4 5 6 7 [ { &amp;#34;title&amp;#34;:&amp;#34;文章名称&amp;#34;, &amp;#34;time&amp;#34;:&amp;#34;发布时间&amp;#34;, &amp;#34;file&amp;#34;:&amp;#34;posts/helloworld.</description>
    </item>
    
    <item>
      <title>2020 05 13 Cloudflare付款异常</title>
      <link>https://pub.oribos.cn/web/blog/2020/note/2020051301.html</link>
      <pubDate>Wed, 13 May 2020 19:51:20 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/blog/2020/note/2020051301.html</guid>
      <description>在cloudflare付款异常 绑定信用卡时出现多次跳转和404错误，
而且最可气的是明明是cloudflare的页面问题，出现多次跳转，cloudflare竟然将访问这的ip地址限制访问。
多次尝试出现如下提示
确实是cloudflare的付款后台问题，一家大公司居然在付款时掉链子也是奇葩，还有cloudflare居然限制访问者ip地址，着实可恶！
测试cloudflare的workers功能。 测试博客页面http://b.ufs.im 部署在workers上的页面
还可以搭建jsproxy，但是还没心情配置。</description>
    </item>
    
    <item>
      <title>2020 05 11 日记</title>
      <link>https://pub.oribos.cn/web/blog/2020/2020051101.html</link>
      <pubDate>Mon, 11 May 2020 16:58:00 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/blog/2020/2020051101.html</guid>
      <description>重新分配了已有的域名解析 hbn.pub ufs.pub 是自己用的主要域名,hbn负责提供内容,ufs负责提供静态资源.均国内服务器,交由阿里云解析.
pfs.pub uns.pub备用交由阿里云解析,是备用域名(其实就是没有再进行备案的国内注册域名)
ufs.im efs.app 交由cloudflare解析.这两个域名是海外注册,域名后缀无法再国内无法备案,原本希望长期使用却无法使用国内服务器.而且.app域名必须使用ssl证书访问,导致使用不方便,交由cloudflare解析并使用其cdn服务可以减少繁琐的证书注册.
为什么需要这么多域名?
因为人的需求是会变的⊙▽⊙,当初注册的域名,随着时间变化,不喜欢了,而喜欢的域名无法备案,不能正常使用国内服务器.所以在数量上就无法有效控制.
不想选择,我都要了!
每个页面保留一个pages服务 静态页面保留一个pages服务,当云服务器出现问题时,可以轻松通过切换源地址,临时使用github pages或者coding pages服务确保访问不中断.
一个对方pages页面，其他页面作为资源源站。
因为自用服务器总会因为各种原因重置系统
重新分配了网站域名 主要站点 t.hbn.pub b.hbn.pub
备用pages站点 info.pfs.pub book.efs.app
域名配置 info.pfs.pub在github,在云服务器上的是info.hbn.pub,两个站点数据一致
book.efs.app在github,在云服务器上的是book.hbn.pub,两者数据一致
部分资源防盗链 网页引用的仅供个人网页使用的图片和静态文件会使用防盗链。使用jsdelivr的资料不会做限制。
新的文件命名方式 2020-05-12-文件名.md
2020-05-12-分类-文件名.md
2020-05-12-&amp;lt;分类&amp;gt;-&amp;lt;文件名&amp;gt;-&amp;lt;属性&amp;gt;.md
引用hugo的post生成文件格式，更好的整理文档
html 格式
20200512&amp;lt;序号&amp;gt;.html
序号至有质数 01 02 03 05 07 09 11 13 17 19 23
git 常用命令 </description>
    </item>
    
    <item>
      <title>2020 05 10 域名的整理</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020051001.html</link>
      <pubDate>Sun, 10 May 2020 09:37:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020051001.html</guid>
      <description>.app域名可以由cloudflare解析 由于cloudflare既有域名解析服务,又能提供cdn服务,交由cloudflare解析的域名可以自动使用ssl证书,那么注册的.app就可以使用cloudflare自动管理证书文件.之前.app由于证书注册和使用不方便一直没有正常使用,现在交由cloudflare解析相当方便轻松。
.app域名无法备案 .app域名仅在cloudflare上使用,解析海外服务,github pages等服务。
.ufs.im 作为workers 路由域名 由cloudflare解析的ufs.im暂时作为workers的路由域名，负责部署在workers上的内容和功能链接。
在github上运行持续集成 自动使用hugo生成public
name: Deploy Hugo Site to Github Pages on Master Branch on: push: branches: - master jobs: build-deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v1 # v2 does not have submodules option now # with: # submodules: true - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: &amp;#39;0.62.2&amp;#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.</description>
    </item>
    
    <item>
      <title>2020 05 09 文件管理</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020050905.html</link>
      <pubDate>Sat, 09 May 2020 16:08:12 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020050905.html</guid>
      <description>关于文件命名和文件等级 内容 文件夹名称 等级 主目录 ufs 0 备份文件 backup 0 本地应用 app 0 下载文件 download 1 工作 work 1 文档 documents 1 媒体库 mms 1 关于文件备份位置 1 区分重要性和冗余类型
1类 本地电脑存储+nas+对象存储私有桶 必要情况下，需要在多个对象存储里备份。长期备份文件需要在对象存储里选 择归档存储。长期备份的文档进行更迭时，1类文件不可删除。 2类 nas或者对象存储私有桶 大容量文件需要在nas保留一份复制，保障在需要时候及时查阅，不用从对象存储上下载花费流量费用。 3类 本地电脑或web服务器存储+对象存储公有桶 4类 对象存储公有桶或web服务器目录 文件版本号以及持续性 已经归档的文件需要标注归档版本号和上一次备份时间。 应在目录下记录备份的时间，位置，版本号。 记录的备份位置不应做不必要的修改。 文件备份原则 并非所有的资料都需要备份，只有有价格的、重要的内容才需要备份 资料备份的同时还是注重索引和搜索。大量文件里找到自己需要的文件是极 其困难的，所以就需要必要的关键字、目录索引、搜索设置、文件分类等设置。 本地电脑的文件，在不备份的情况下属于不可靠的。 图片，视频等可以在windows文件管理器里预览的文件名可以不用严格命 名。不能预览的文件需要严格命名。 </description>
    </item>
    
    <item>
      <title>2020 05 09 git submodule</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020050903.html</link>
      <pubDate>Sat, 09 May 2020 16:04:46 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020050903.html</guid>
      <description>git submodule
文章来源 知乎-孤单彼岸
背景 面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。
这种情况下，通常不会把所有源码都放在同一个 Git 仓库中。
有一种比较简单的方式，是在当前工作目录下，将子模块文件夹加入到 .gitignore 文件内容中，这样主项目就能够无视子项目的存在。这样做有一个弊端就是，使用主项目的人需要有一个先验知识：需要在当前目录下放置一份某版本的子模块代码。
还有另外一种方式可供借鉴，可以使用 Git 的 submodule 功能，也是这篇文章的主题。
实际上 Git 工具的 submodule 功能就是建立了当前项目与子模块之间的依赖关系：子模块路径、子模块的远程仓库、子模块的版本号。
使用流程 假定我们有两个项目：project-main 和 project-sub-1，其中 project-main 表示主项目，而 project-sub-1 表示子模块项目。
其中 project-main 的远程仓库地址为 https://github.com/username/project-main.git，而 project-sub-1 的远程仓库地址为 https://github.com/username/project-sub-1.git。
接下来，我们希望在 project-main 中添加 project-sub-1 ，而又保持 project-sub-1 自身独立的版本控制。
1.创建 submodule 使用 git submodule add &amp;lt;submodule_url&amp;gt; 命令可以在项目中创建一个子模块。
进入项目 project-main ，输入：
➜ project-main git:(master) git submodule add https://github.com/username/project-sub-1.git 正克隆到 &amp;lsquo;/path/to/project-main/project-sub-1&amp;rsquo;&amp;hellip; remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done.</description>
    </item>
    
    <item>
      <title>2020 05 09 自动跳转测试</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020050901.html</link>
      <pubDate>Sat, 09 May 2020 11:13:44 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020050901.html</guid>
      <description>&amp;lt;meta http-equiv=&amp;#34;refresh&amp;#34; content=&amp;#34;1;url=http://info.hbn.pub&amp;#34;&amp;gt; &amp;lt;style&amp;gt; .loading{ width: 80px; height: 40px; margin: 0 auto; margin-top:100px; } .loading span{ display: inline-block; width: 8px; height: 100%; border-radius: 4px; background: lightgreen; -webkit-animation: load 1s ease infinite; } @-webkit-keyframes load{ 0%,100%{ height: 40px; background: lightgreen; } 50%{ height: 70px; margin: -15px 0; background: lightblue; } } .loading span:nth-child(2){ -webkit-animation-delay:0.2s; } .loading span:nth-child(3){ -webkit-animation-delay:0.4s; } .loading span:nth-child(4){ -webkit-animation-delay:0.6s; } .loading span:nth-child(5){ -webkit-animation-delay:0.8s; } &amp;lt;/style&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;loading&amp;#34;&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; </description>
    </item>
    
    <item>
      <title>2020 05 08 对点击的应用</title>
      <link>https://pub.oribos.cn/web/blog/2020/note/2020050804.html</link>
      <pubDate>Fri, 08 May 2020 22:22:53 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/blog/2020/note/2020050804.html</guid>
      <description>重定向跳转 通过a标签的链接,点击进入下一页是最简单的链接.而如何在不改变原文件html编码的情况下修改链接? 就需要一个点击重定向.
对固定页面比如www首页,使用点击重定向.
莫名其妙的Homebrew hugo的页面推荐安装方式是brew install hugo ,需要使用Homebrew安装，但是这个homebrew是mac系统上常用的包管理器，linux上并不常用。偶尔有空试试用这个Homebrew安装一下应用，奈何太难用。
使用Homebrew 最莫名起来的是此程序不允许root用户运行，这种强迫着实让人反感。
然后是 推荐安装方式
/bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;quot;
经常性无法连接。
再接着是极慢的下载速度。
事实上使用github作为软件发放源的方式，下载都极慢。
更新：更换海外服务器同步后，速度起飞
换一种安装方式
sudo yum groupinstall &amp;#39;Development Tools&amp;#39; sudo yum install curl file git sudo yum install libxcrypt-compat # needed by Fedora 30 and up 最后一步无法安装。。。
结果 无论是主页推荐安装方式，yum安装方式，源代码安装方式，均由于极慢的下载速度，找不到文件等等原因无法安装这个Homebrew 。 体验失败。
极其糟糕的使用体验。
coding pages无法访问 5月5日晚上发现自己的博客网站访问异常,原本博客网站部署在coding pages,然后再用上阿里云cdn.出现异常原本以为是阿里云cdn缓存异常.结果长时间仍然无法访问.就将cdn停掉,直接使用源coding pages地址访问.发现无法访问.
换掉coding pages的服务 由于网站停止访问时间太长,已经对coding的服务产生担忧.刚开始的无法访问还以为是阿里云的问题,结果是持续服务的coding出现网络故障.
后续对所有之前使用的coding pages的页面全部改用云服务器,oss和jsdelivr.涉及到旧文档的链接都进行修改.删除coding上的仓库.停用部分coding上的项目.将博客网站从coding pages的解析换到云服务器上,
对coding 的信任程度下降 对coding 的迁移仅仅是处于不信任下的测试,因为国内github也不是很稳定,必须在两者这件找到平衡.
受此次故障影响,删除了几乎所有用来提供web访问的仓库,pages页面和静态资源内容全部迁出coding.
后续影响 突如其来的coding pages无法访问.导致对本地发布+coding pages浏览的方式的彻底否定.</description>
    </item>
    
    <item>
      <title>2020 05 08 网页整理</title>
      <link>https://pub.oribos.cn/web/blog/2020/note/2020050804.html</link>
      <pubDate>Fri, 08 May 2020 15:34:46 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/blog/2020/note/2020050804.html</guid>
      <description>&lt;h4 id=&#34;网页又一次重新整理&#34;&gt;网页又一次重新整理&lt;/h4&gt;
&lt;p&gt;之前遇到的情况是网页部署的位置coding pages和github pages不稳定.时常出现网页无法打开的情况.&lt;/p&gt;
&lt;p&gt;针对此问题,期望通过CDN同时缓存两个站点以备用.但是coding和github采用的不同的网页访问限制,导致CDN出现困难.暂时没有找到解决办法.&lt;/p&gt;
&lt;p&gt;现在采用的方法是首页www放置到固定位置,然后通过访问www页面的不同内容链接,链接到coding pages页面上.这样当coding pages访问异常时,只会影响coding pages页面上的内容,而影响不到首页.后续可能在这种链接上加入跳转中间页跳转功能.链接到多个内容源.&lt;/p&gt;
&lt;h4 id=&#34;内容分散&#34;&gt;内容分散&lt;/h4&gt;
&lt;p&gt;由于采用的首页和内容页分离的方法,不同的内容页就导致文档更新分散.有时候可能出现把文件归错类,多个页面内容重复的情况.&lt;/p&gt;
&lt;h4 id=&#34;中间页跳转&#34;&gt;中间页跳转&lt;/h4&gt;
&lt;p&gt;首页的某个&lt;strong&gt;链接&lt;/strong&gt;,连接到&lt;strong&gt;链接1&lt;/strong&gt;,链接1可以设置一个跳转到&lt;strong&gt;页面2&lt;/strong&gt;,也可以在某个情况下设置跳转到&lt;strong&gt;页面3&lt;/strong&gt;,首页链接和页面2,页面3都是固定的内容页,但是用来跳转的的链接1是可变的.&lt;/p&gt;
&lt;p&gt;目前这个链接地址为 &lt;a href=&#34;http://i.ufs.pub/kit/&#34;&gt;http://i.ufs.pub/kit/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;url地址&#34;&gt;url地址&lt;/h4&gt;
&lt;p&gt;有些人认为页面带&lt;code&gt;.html&lt;/code&gt;很丑,但我已经坚持将页面跟图片视频一样带有必要的后缀.即:显示最终内容的页面坚持传统的带.html,跳转链接等功能性的页面不带html.&lt;/p&gt;
&lt;h3 id=&#34;对linux系统及其应用的吐槽&#34;&gt;对linux系统及其应用的吐槽&lt;/h3&gt;
&lt;h4 id=&#34;各类问题点&#34;&gt;各类问题点&lt;/h4&gt;
&lt;p&gt;操作基于代码,或者说是最低端操作体验.需要记单词,需要区分大小写,需要区分字符类型.本身就是算法的操作思想却被&lt;strong&gt;照搬&lt;/strong&gt;给用户使用.&lt;/p&gt;
&lt;p&gt;使用代码操作并不是因为多高大上,&lt;strong&gt;成品素质差&lt;/strong&gt;,没有适合的,专业的,稳定的操作界面.随之而来的就是各类gui操作界面,网页操作界面.总之,产品总是不完善.&lt;/p&gt;
&lt;p&gt;过于散乱的包管理器ubuntu的 apt,centos的yum ,nodejs的npm,还有Homebrew,RubyGems等等,linux系统已经够多了,包管理器,一个应用级的程序居然也有如此之多,充分体现了&lt;strong&gt;linux用户互相容不下别人的思想&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;这些系统和包管理器,如果真的跟随系统对应,或者类似npm的应用广泛还能易用就没什么问题,奈何各类软件总是遇到各类神奇问题,&lt;strong&gt;网络不畅下载极慢&lt;/strong&gt;,&lt;strong&gt;版本不兼容&lt;/strong&gt;,对中文支持不佳.&lt;/p&gt;
&lt;p&gt;版本众多,更新保守导致&lt;strong&gt;产品碎片化严重&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;事例&#34;&gt;事例&lt;/h4&gt;
&lt;p&gt;一个在Windows linux macOS上广泛使用的静态网站生成器,他推荐的安装方式是:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;brew install hugo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是什么鬼东西,你把macOS上的工具照抄下来?为了安装这个静态网站生成器,需要安装golang git 这是运行基础,这个brew不就是一个macOS包管理器吗,&lt;/p&gt;
&lt;p&gt;为啥推到linux默认安装?  至于这么麻烦吗?  嫌用户入门太低?&lt;/p&gt;
&lt;p&gt;而且这个brew安装极慢,使用极不方便!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;hugo里面的主题,&lt;strong&gt;各类安装方式都有&lt;/strong&gt;,各类toml,yaml甚至json配置文件.各类css,scss,PostCSS乱七八糟的东西.&lt;/p&gt;
&lt;p&gt;你感觉使用一个合格的主题就行了,没必要琢磨这么多,然而,几百个主题,没几个适合的.也就是说&lt;strong&gt;大部分都是残次品&lt;/strong&gt;.要么不能自定义很多东西,要么各类不兼容,大部分都需要深度加工.当然&lt;strong&gt;下载极慢是家常便饭&lt;/strong&gt;.另外还有花样繁多的安装方式,配置文件,扩展程序.私有文件.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;复杂的操作,使用zip分卷压缩和解压缩文件,代码如下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cat a* &amp;gt; a.tar.gz   // 将该目录下的a.z01  a.z02  a.z03 全部集合到一个压缩包a.tar.gz
tar xzvf a.tar.gz   // 解压缩a.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;关于文件命名和文件等级&#34;&gt;关于文件命名和文件等级&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;内容&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;文件夹名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;等级&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;主目录&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ufs&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备份文件&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;backup&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;本地应用&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;app&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;下载文件&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;download&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;工作&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;work&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文档&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;documents&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;媒体库&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;对资源的命名&#34;&gt;对资源的命名&lt;/h3&gt;
&lt;h4 id=&#34;文件格式&#34;&gt;文件格式&lt;/h4&gt;
&lt;p&gt;2020-05-12-文件名.md&lt;/p&gt;
&lt;p&gt;2020-05-12-分类-文件名.md&lt;/p&gt;
&lt;p&gt;2020-05-12-&amp;lt;分类&amp;gt;-&amp;lt;文件名&amp;gt;-&amp;lt;属性&amp;gt;.md&lt;/p&gt;
&lt;p&gt;新文件格式&lt;/p&gt;
&lt;p&gt;引用hugo的post生成文件格式，更好的整理文档&lt;/p&gt;
&lt;p&gt;html 格式&lt;/p&gt;
&lt;p&gt;20200512&amp;lt;序号&amp;gt;.html&lt;/p&gt;
&lt;p&gt;序号至有质数 01 02 03 05 07 09 11 13 17 19 23&lt;/p&gt;
&lt;h4 id=&#34;目录名&#34;&gt;目录名&lt;/h4&gt;
&lt;p&gt;根目录 所有文件总和                UFS   denalon&lt;/p&gt;
&lt;p&gt;次级目录  公开的分享的资源&lt;/p&gt;
&lt;p&gt;kit   工具
site  服务器配置文件
web  服务器共享文件
ufs   资源文件&lt;/p&gt;
&lt;p&gt;backup app mms&lt;/p&gt;
&lt;p&gt;重新规定了目录，UFS和denalon是主目录（在一个设备中只有一个主目录）&lt;/p&gt;
&lt;p&gt;site 是配置文件目录，存放配置文件，系统临时文件目录&lt;/p&gt;
&lt;p&gt;kit 重要 是工具文件  子目录   app  key ssh  hb个人记事本&lt;/p&gt;
&lt;p&gt;ufs  重要  公开共享的文件  web文件  子目录 web  其他文件&lt;/p&gt;
&lt;p&gt;download  下载文件 临时目录&lt;/p&gt;
&lt;p&gt;mms 重要  多媒体文件&lt;/p&gt;
&lt;p&gt;backup 备份文件&lt;/p&gt;
&lt;h4 id=&#34;对服务的命名&#34;&gt;对服务的命名&lt;/h4&gt;
&lt;p&gt;hb-XXXX-123&lt;/p&gt;
&lt;p&gt;hb 或fn  zb 是服务类型&lt;/p&gt;
&lt;p&gt;XXXX  服务分类&lt;/p&gt;
&lt;p&gt;公共资源 web
功能  kit&lt;/p&gt;
&lt;p&gt;123 编号，序列&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2020 05 08 部署记录02</title>
      <link>https://pub.oribos.cn/web/lambda/test/2020/2020050801.html</link>
      <pubDate>Fri, 08 May 2020 11:38:06 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/lambda/test/2020/2020050801.html</guid>
      <description>文件整合 对某些类型,某些特定功能的文件的整合.以减少文件数量和页面. 1. 将某一段时间的日志文件整合到一个文件夹. 2. 对某些类型的文件归入一个&amp;quot;标签&amp;quot;,增加关键字和分类 3. 文件的链接和引入. 4. 减少文件数量,减少目录的数量.即保证功能分目录增加又减少繁杂的新文件.
例子:新的功能 文件目录结构: /总目录/功能目录/类别/2020-05-01-名称-附加.文件名
总目录:用于整合所有有用文件.排除测试,临时,大文件等. 总目录:
kit 所有app,大文件,存档,backup等 site 服务器的日常文件, project 主要工作文件,项目 project的文件夹的所有内容都是要随时备份的,site可以根据需要备份或同步.kit内的文件是交给内部存档.不用于同步和重要备份
功能目录: web 发布的文档 olf 私有文件 文件名 2020-05-01-名称-附加.文件名 文件更新均在当年使用,之前的文档全部转入归档文件夹,文件夹的分类主要根据日期和附加类型区分,即附加名称为日记的均放到hb的类别目录下.
前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，完美的动效设计，给用户带来极高的用户体验。
如下图: 核心技术 HTML、CSS、JavaScript
这三个是前端开发中最基本也是最必须的三个技能。前端的开发中，在页面的布局时， HTML将元素进行定义，CSS对展示的元素进行定位，再通过JavaScript实现相应的效果和交互。虽然表面看起来很简单，但这里面需要掌握的东西绝对不会少。在进行开发前，需要对这些概念弄清楚、弄明白，这样在开发的过程中才会得心应手。
HTML 指的是超文本标记语言 (Hyper Text Markup Language)，这个也是我们网页最常用普通的语言了，经历了多个版本的发展，已经发展到5.0版了，得力于W3C建立的标准和规范，已普遍升级到了XHTML，XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）， XHTML 于2000年的1月26日成为 W3C 标准，是更严格更纯净的 HTML 代码，XHTML 的目标是取代 HTML。XHTML 与 HTML 4.01 几乎是相同的，XHTML 是作为一种 XML 应用被重新定义的 HTML，是一个 W3C 标准。W3C 将 XHTML 定义为最新的HTML版本。所有新的浏览器都支持 XHTML。
CSS 级联样式表（Cascading Style Sheet）简称“CSS”，通常又称为“风格样式表（Style Sheet）”，它是用来进行网页风格设计的。比如，如果想让链接字未点击时是蓝色的，当鼠标移上去后字变成红色的且有下划线，这就是一种风格。通过设立样式表，可以统一地控制HTML中各标志的显示属性。级联样式表可以使人更能有效地控制网页外观。使用级联样式表，可以扩充精确指定网页元素位置，外观以及创建特殊效果的能力。</description>
    </item>
    
    <item>
      <title>2020 05 08 Cdn加速</title>
      <link>https://pub.oribos.cn/web/deploy/2020050801.html</link>
      <pubDate>Fri, 08 May 2020 10:25:49 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020050801.html</guid>
      <description>通过cdn加速 由于github pages 和coding pages,Netlify等服务在国内访问速度堪忧,甚至会故障.就需要一种访问同时缓存这三家服务以及本地云服务器.</description>
    </item>
    
    <item>
      <title>2020 05 07 Hugo的目录</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020050701.html</link>
      <pubDate>Thu, 07 May 2020 20:55:14 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020050701.html</guid>
      <description>重新整理的目录 重新将网站的目录区分开,因为hugo使用默认的posts,archives等标签会被默认设置修改效果.所以修改成其他标签名称.使用categoryBy = &amp;quot;sections&amp;quot;
重新整理的目录使得public根目录下来又多出来许多标签文件夹.导致目录混乱,不易归档.
按照上一年文档归档 每年一次将上一年文件归档存放到archive文件夹下</description>
    </item>
    
    <item>
      <title>2020 05 06 Postcss问题</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020050608.html</link>
      <pubDate>Wed, 06 May 2020 22:22:55 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020050608.html</guid>
      <description>使用hugo docsy主题出现如下问题 Replace Autoprefixer browsers option to Browserslist config. Use browserslist key in package.json or .browserslistrc file. Using browsers option cause some error. Browserslist config can be used for Babel, Autoprefixer, postcss-normalize and other tools. If you really need to use option, rename it to overrideBrowserslist. Learn more at: https://github.com/browserslist/browserslist#readme https://twitter.com/browserslist 这个提醒应该是某个插件不再使用,提示修改配置,网上搜很多方法,都是含糊其词,
我搜索关键词到 ~/hugo根目录/themes/docsy/postcss.config.js 文件
然后把以下代码
module.exports = { plugins: { autoprefixer: { browsers: [ &amp;#34;Android 2.3&amp;#34;, &amp;#34;Android &amp;gt;= 4&amp;#34;, &amp;#34;Chrome &amp;gt;= 20&amp;#34;, &amp;#34;Firefox &amp;gt;= 24&amp;#34;, &amp;#34;Explorer &amp;gt;= 8&amp;#34;, &amp;#34;iOS &amp;gt;= 6&amp;#34;, &amp;#34;Opera &amp;gt;= 12&amp;#34;, &amp;#34;Safari &amp;gt;= 6&amp;#34; ] } }, } 改成以下代码,就不再报错</description>
    </item>
    
    <item>
      <title>2020 05 06 价值观</title>
      <link>https://pub.oribos.cn/web/idea/2020050603.html</link>
      <pubDate>Wed, 06 May 2020 16:27:39 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/idea/2020050603.html</guid>
      <description>丑小鸭的故事 丑小鸭是丹麦作家安徒生创作的童话，描写了一只天鹅蛋在鸭群中破壳，历经重重磨难之后长成白天鹅的故事
从前，有一枚天鹅蛋在鸭巢里被母鸭孵出，可是它却因为长相与众不同而被大家嘲笑称为“丑小鸭”。丑小鸭自破壳后便受到种种排挤、讥笑，大家都要赶走这个可怜的小鸭子，于是他只好伤心的连夜飞过篱笆逃走了。孤独的丑小鸭经常被欺负，他为自己的丑陋感到自卑，直到在湖边遇到了一群天鹅，丑小鸭想：被美丽的天鹅杀死，也要比现在这样受苦好得多。他来到天鹅湖，低着头向天鹅游去，当它在清撤的水面看到自已的倒影时，发现自己长大后原来是一只白天鹅
1 一个天鹅在鸭群里属于异类,被大家嘲笑甚至攻击都是很正常的.母鸭同样也不应该就是自己孵化的就天生具有特殊感情,本质上天鹅就是异类甚至入侵者.
2 丑小鸭以为自己丑陋而自卑,是出于对其他鸭类的外貌,标准评定的.也就是说自己是活在别人的眼光下的,根本没有自我的认识.
3 丑小鸭是否变成天鹅甚至凤凰,都对鸭群来说没有区别.以鸭群来看无论丑小鸭后来变成丑鸭子还是白天鹅,他都是异类都是怪物.
###　南辕北辙
魏王想攻打赵国，季梁劝他说：&amp;ldquo;我在大路上遇到一个赶着车向北走的人，告诉我说：‘我要去楚国。&amp;lsquo;我问他：‘你要去楚国，为什么要向北呢?&amp;lsquo;他说：&amp;lsquo;我的马跑得快。&amp;lsquo;我说：&amp;lsquo;您的马虽然跑得快，但这不是去楚国的路啊!&amp;lsquo;他又说：&amp;lsquo;我的盘缠很充足。&amp;lsquo;我说：‘你的盘缠虽然多，但这不是去楚国的路啊!&amp;lsquo;他又说：&amp;lsquo;给我驾车的人本领很高。&amp;lsquo;他不知道方向错了，赶路的条件越好，离楚国的距离就会越远。
现代人都知道地球的圆的,可以说南辕北辙在理论上是正确的,只要你向北走几十年,总有一天会到达目的地!这看上去很荒谬,但是理论上是没有问题的.</description>
    </item>
    
    <item>
      <title>2020 05 06 个性化格式</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020050602.html</link>
      <pubDate>Wed, 06 May 2020 08:06:22 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020050602.html</guid>
      <description>标点符号 中文使用的标点符号采用英文半角形式
无论是否有明确的规定.所有设计符号和标点的地方均使用半角形式.
字体 字体坚持使用黑体字
无衬线体（Sans-serif）专指西文中没有衬线的字体,与汉字字体中的黑体相对应.与衬线字体相反，该类字体通常是机械的和统一线条的,它们往往拥有相同的曲率,笔直的线条,锐利的转角.在整文阅读的情况下,适合使用衬线字体进行排版,易于换行阅读的识别性,避免发生行间的阅读错误.
而页面坚持使用黑体的原因是:在电脑屏幕,手机,平板等数码设备上.无衬线体相较于其他衬线的字体,单位面积上用色更多,字体更清晰,更易于识别.
页面 简单化的页面布局,减少不必要的装饰和控件.
为了应对现今社会的信息焦虑,一个良好页面应该尽可能少的展示给读者内容,尽可能快速简单的将重要的信息展示给读者.避免不必要的干扰和信息泛滥.</description>
    </item>
    
    <item>
      <title>2020 05 06 Coding pages故障</title>
      <link>https://pub.oribos.cn/web/deploy/2020050601.html</link>
      <pubDate>Wed, 06 May 2020 08:01:30 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020050601.html</guid>
      <description>coding pages无法访问 5月5日晚上发现自己的博客网站访问异常,原本博客网站部署在coding pages,然后再用上阿里云cdn.出现异常原本以为是阿里云cdn缓存异常.结果长时间仍然无法访问.就将cdn停掉,直接使用源coding pages地址访问.发现无法访问.
换掉coding pages的服务 由于网站停止访问时间太长,已经对coding的服务产生担忧.刚开始的无法访问还以为是阿里云的问题,结果是持续服务的coding出现网络故障.
后续对所有之前使用的coding pages的页面全部改用云服务器,oss和jsdelivr.涉及到旧文档的链接都进行修改.删除coding上的仓库.停用部分coding上的项目.将博客网站从coding pages的解析换到云服务器上,
对coding 的信任程度下降 对coding 的迁移仅仅是处于不信任下的测试,因为国内github也不是很稳定,必须在两者这件找到平衡.
受此次故障影响,删除了几乎所有用来提供web访问的仓库,pages页面和静态资源内容全部迁出coding.
后续影响 突如其来的coding pages无法访问.导致对本地发布+coding pages浏览的方式的彻底否定.尽管是短时间的故障,却让我认识到无论是github还是gitlab coding等等服务都无法持续可靠提供web浏览.特别是放置所有静态资源,图片的网址,负责较多的静态资源甚至还部署有CDN依然无法维持可靠运行.</description>
    </item>
    
    <item>
      <title>2020 05 02 单页模板</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020050202.html</link>
      <pubDate>Sat, 02 May 2020 11:04:39 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020050202.html</guid>
      <description>专用的单页模板 info.hbn.pub 是专门设计的单页模板,此页面内容仅限分享出来的链接,
如: http://info.ufs.im/hb/2020042101.html
的特定地址,对应的页面,仅提供基本的内容,不提供搜索,只提供有限的索引目录链接功能.效果为 只能通过提供的url地址访问页面,点击页面的上链接将退出访问页面,且无法索引回访问页面.只能通过url地址访问.
单页功能 提供特定页面,部署一个单页面以供某些特定情况使用.比如微博微信分享.
将url地址短域名缩减.</description>
    </item>
    
    <item>
      <title>2020 05 01 Github的下载速度令人发指</title>
      <link>https://pub.oribos.cn/web/deploy/2020050103.html</link>
      <pubDate>Fri, 01 May 2020 22:54:24 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020050103.html</guid>
      <description>偶然发现下载github上的项目速度是如此之差 由于使用homebrew时需要在github上下载代码,结果发现,每次到github下载的时候速度极慢,然后回顾几天前github无法访问.导致代码更新延迟.
发现问题 经过反复尝试,发现国内的网络下载github相当糟糕,换做其他地区的连路就异常的高速,甚至达到带宽极限.可以看出是糟糕的网络环境造成的.
由于github的不可或缺 由于github上有大量的代码库,许多应用,程序都在github上部署.github无法访问会对应用造成极大的不便.而大量应用也不顾糟糕的网络环境不断的向github上部署,又形成不可调节的冲突.
需要找到代替github的方法,或者找到正常访问github的解决方案.矛盾总要得到解决.对糟糕的网络环境的不满也不可避免.无论github是否能用jsdelivr的cdn资源是必须长期使用的,github的项目也就必须保持,github目前不可代替.</description>
    </item>
    
    <item>
      <title>2020 05 01 Homebrew</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020050101.html</link>
      <pubDate>Fri, 01 May 2020 19:45:18 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020050101.html</guid>
      <description>莫名其妙的Homebrew hugo的页面推荐安装方式是brew install hugo ,需要使用Homebrew安装，但是这个homebrew是mac系统上常用的包管理器，linux上并不常用。偶尔有空试试用这个Homebrew安装一下应用，奈何太难用。
使用Homebrew 最莫名起来的是此程序不允许root用户运行，这种强迫着实让人反感。
然后是 推荐安装方式
/bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;quot;
经常性无法连接。
再接着是极慢的下载速度。
事实上使用github作为软件发放源的方式，下载都极慢。
更新：更换海外服务器同步后，速度起飞
换一种安装方式
sudo yum groupinstall &amp;#39;Development Tools&amp;#39; sudo yum install curl file git sudo yum install libxcrypt-compat # needed by Fedora 30 and up 最后一步无法安装。。。
结果 无论是主页推荐安装方式，yum安装方式，源代码安装方式，均由于极慢的下载速度，找不到文件等等原因无法安装这个Homebrew 。 体验失败。
极其糟糕的使用体验。</description>
    </item>
    
    <item>
      <title>2020 04 30 重回旧版本</title>
      <link>https://pub.oribos.cn/web/deploy2020043003.html</link>
      <pubDate>Thu, 30 Apr 2020 18:48:43 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy2020043003.html</guid>
      <description>提交出错 由于运用新的文件格式,对g.hbn.pub的所有文件目录进行调整,包括旧文件.依符合新的文件格式的规范.然而由于之前必须确保网页URL地址长期不变,这些修改后的文件不应该发布到b.hbn.pub.又因为资源整个,g的仓库其实是跟b仓库放在一起,只是一个发布次序的问题.
以上的情况导致在发布b网页更新是,将g仓库文件原封不动的发布到b网页.导致所有的旧文件URL地区全部改变.这必然导致已经发布的url地址出现无法访问的故障,不应该发生.
针对这种异常,寻找一种办法解决.目前的措施是,撤销最近的提交,重新使用上一次文档.
页面地址长期有效 页面URL地址必须长期有效,无论服务在云服务器上还是oss,还是git仓库里.对外访问地址必须保持较长时间的可用.
针对旧地址的重定向. 后续,将调整旧地址的重定向,自动跳转到新的地址.既要保证资源整合,又需要兼顾旧文件的可用性.事实上,整个网页可以存档保持.不再更新?已经更在启用代替b地址的新的网页地址.
对文件的存档 文件均通过云服务器编辑和保存，然后通过内网oss进行备份。
更新:基于成本和管理方面的限制,已经不再要求url长期不变.
新的页面将按照新的文件格式规整排序,旧的文档将归档放入归档文件夹.</description>
    </item>
    
    <item>
      <title>Git中submodule的使用</title>
      <link>https://pub.oribos.cn/web/deploy/2020/2020042801.html</link>
      <pubDate>Tue, 28 Apr 2020 16:32:00 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020/2020042801.html</guid>
      <description>文章来源 知乎-孤单彼岸
背景 面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。
这种情况下，通常不会把所有源码都放在同一个 Git 仓库中。
有一种比较简单的方式，是在当前工作目录下，将子模块文件夹加入到 .gitignore 文件内容中，这样主项目就能够无视子项目的存在。这样做有一个弊端就是，使用主项目的人需要有一个先验知识：需要在当前目录下放置一份某版本的子模块代码。
还有另外一种方式可供借鉴，可以使用 Git 的 submodule 功能，也是这篇文章的主题。
实际上 Git 工具的 submodule 功能就是建立了当前项目与子模块之间的依赖关系：子模块路径、子模块的远程仓库、子模块的版本号。
使用流程 假定我们有两个项目：project-main 和 project-sub-1，其中 project-main 表示主项目，而 project-sub-1 表示子模块项目。
其中 project-main 的远程仓库地址为 https://github.com/username/project-main.git，而 project-sub-1 的远程仓库地址为 https://github.com/username/project-sub-1.git。
接下来，我们希望在 project-main 中添加 project-sub-1 ，而又保持 project-sub-1 自身独立的版本控制。
1.创建 submodule 使用 git submodule add &amp;lt;submodule_url&amp;gt; 命令可以在项目中创建一个子模块。
进入项目 project-main ，输入：
➜ project-main git:(master) git submodule add https://github.com/username/project-sub-1.git 正克隆到 &amp;lsquo;/path/to/project-main/project-sub-1&amp;rsquo;&amp;hellip; remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done.</description>
    </item>
    
    <item>
      <title>对各类应用的吐槽</title>
      <link>https://pub.oribos.cn/web/deploy/2020042502.html</link>
      <pubDate>Sat, 25 Apr 2020 18:57:04 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020042502.html</guid>
      <description>对linux系统及其应用的吐槽 各类问题点 操作基于代码,或者说是最低端操作体验.需要记单词,需要区分大小写,需要区分字符类型.本身就是算法的操作思想却被照搬给用户使用.
使用代码操作并不是因为多高大上,成品素质差,没有适合的,专业的,稳定的操作界面.随之而来的就是各类gui操作界面,网页操作界面.总之,产品总是不完善.
过于散乱的包管理器ubuntu的 apt,centos的yum ,nodejs的npm,还有Homebrew,RubyGems等等,linux系统已经够多了,包管理器,一个应用级的程序居然也有如此之多,充分体现了linux用户互相容不下别人的思想.
这些系统和包管理器,如果真的跟随系统对应,或者类似npm的应用广泛还能易用就没什么问题,奈何各类软件总是遇到各类神奇问题,网络不畅下载极慢,版本不兼容,对中文支持不佳.
版本众多,更新保守导致产品碎片化严重.
事例 一个在Windows linux macOS上广泛使用的静态网站生成器,他推荐的安装方式是:
brew install hugo
这是什么鬼东西,你把macOS上的工具照抄下来?为了安装这个静态网站生成器,需要安装golang git 这是运行基础,这个brew不就是一个macOS包管理器吗,
为啥推到linux默认安装? 至于这么麻烦吗? 嫌用户入门太低?
而且这个brew安装极慢,使用极不方便!
hugo里面的主题,各类安装方式都有,各类toml,yaml甚至json配置文件.各类css,scss,PostCSS乱七八糟的东西.
你感觉使用一个合格的主题就行了,没必要琢磨这么多,然而,几百个主题,没几个适合的.也就是说大部分都是残次品.要么不能自定义很多东西,要么各类不兼容,大部分都需要深度加工.当然下载极慢是家常便饭.另外还有花样繁多的安装方式,配置文件,扩展程序.私有文件.
复杂的操作,使用zip分卷压缩和解压缩文件,代码如下
cat a* &amp;gt; a.tar.gz // 将该目录下的a.z01 a.z02 a.z03 全部集合到一个压缩包a.tar.gz tar xzvf a.tar.gz // 解压缩a.tar.gz 对windows系统及其应用的吐槽 登录时候先欢迎5分钟
开机应用各种弹窗,各种确认,各种关闭
各种自动更新</description>
    </item>
    
    <item>
      <title>内容列表</title>
      <link>https://pub.oribos.cn/web/deploy/2020042117.html</link>
      <pubDate>Tue, 21 Apr 2020 17:36:16 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020042117.html</guid>
      <description> </description>
    </item>
    
    <item>
      <title>编程的一些基本理论</title>
      <link>https://pub.oribos.cn/web/deploy/2020042113.html</link>
      <pubDate>Tue, 21 Apr 2020 17:36:16 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020042113.html</guid>
      <description>编程的一些基本理论 属性 = &amp;#34;属性值&amp;#34; 函数(参数){ 函数体 } &amp;lt;元素&amp;gt;我的第一段 JavaScript&amp;lt;/元素&amp;gt; &amp;lt;元素 属性=&amp;#34;属性值&amp;#34;&amp;gt; &amp;lt;h1 class=&amp;#34;center&amp;#34;&amp;gt;标题居中&amp;lt;/h1&amp;gt; 元素的class &amp;lt;p id=&amp;#34;para1&amp;#34;&amp;gt;Hello World!&amp;lt;/p&amp;gt; 问题 就想编程语言里的function其实本意是“动作”。由于翻译的问题，对词汇的作用理解出现歧义
在html里，CSS Id 和 Class 选择器。翻译为id选择器和类选择器就出现了歧义，其实class就是html元素的一个普通属性，尽管作用很大。不翻译为类选择器而直接使用class选择器更能理解和使用。</description>
    </item>
    
    <item>
      <title>一个git仓库不同分支</title>
      <link>https://pub.oribos.cn/web/deploy/2020041701.html</link>
      <pubDate>Fri, 17 Apr 2020 11:14:51 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020041701.html</guid>
      <description>一个git仓库生成不同的分支 master分支显示正式的，整理过的文件。
b分支是测试，临时文件。
源文件存放在base仓库 源文件也由于生成的public不同分为master分支和b分支
区别 使用同一个仓库不同分支和不同仓库的区别。</description>
    </item>
    
    <item>
      <title>白嫖github</title>
      <link>https://pub.oribos.cn/web/2020040301.html</link>
      <pubDate>Fri, 03 Apr 2020 08:57:58 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/2020040301.html</guid>
      <description>github作用 github是一个面向开源及私有软件项目的托管平台,类似的平台还有gitlab,coding.但是github的功能丰富,除了专业的git代码托管以外,还有其他用法
图床 使用picgo,然后填写相应的代码可以实现图床功能.
静态网站 github 自带的pages功能,支持自定义域名. pages
应用仓库 各类windows linux Android 应用都可以在github上搜索.</description>
    </item>
    
    <item>
      <title>前端需要的工具</title>
      <link>https://pub.oribos.cn/web/deploy/2020033001.html</link>
      <pubDate>Mon, 30 Mar 2020 15:12:16 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020033001.html</guid>
      <description>前端即网站前台部分，运行在PC端，移动端等浏览器上展现给用户浏览的网页。随着互联网技术的发展，HTML5，CSS3，前端框架的应用，跨平台响应式网页设计能够适应各种屏幕分辨率，完美的动效设计，给用户带来极高的用户体验。
如下图: 核心技术 HTML、CSS、JavaScript
这三个是前端开发中最基本也是最必须的三个技能。前端的开发中，在页面的布局时， HTML将元素进行定义，CSS对展示的元素进行定位，再通过JavaScript实现相应的效果和交互。虽然表面看起来很简单，但这里面需要掌握的东西绝对不会少。在进行开发前，需要对这些概念弄清楚、弄明白，这样在开发的过程中才会得心应手。
HTML 指的是超文本标记语言 (Hyper Text Markup Language)，这个也是我们网页最常用普通的语言了，经历了多个版本的发展，已经发展到5.0版了，得力于W3C建立的标准和规范，已普遍升级到了XHTML，XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）， XHTML 于2000年的1月26日成为 W3C 标准，是更严格更纯净的 HTML 代码，XHTML 的目标是取代 HTML。XHTML 与 HTML 4.01 几乎是相同的，XHTML 是作为一种 XML 应用被重新定义的 HTML，是一个 W3C 标准。W3C 将 XHTML 定义为最新的HTML版本。所有新的浏览器都支持 XHTML。
CSS 级联样式表（Cascading Style Sheet）简称“CSS”，通常又称为“风格样式表（Style Sheet）”，它是用来进行网页风格设计的。比如，如果想让链接字未点击时是蓝色的，当鼠标移上去后字变成红色的且有下划线，这就是一种风格。通过设立样式表，可以统一地控制HTML中各标志的显示属性。级联样式表可以使人更能有效地控制网页外观。使用级联样式表，可以扩充精确指定网页元素位置，外观以及创建特殊效果的能力。
JavaScript 是一种由Netscape的LiveScript发展而来的原型化继承的面向对象的动态类型的区分大小写的客户端脚本语言，主要目的是为了解决服务器端语言，比如Perl，遗留的速度问题，为客户提供更流畅的浏览效果。当时服务端需要对数据进行验证，由于网络速度相当缓慢，只有28.8kbps，验证步骤浪费的时间太多。于是Netscape的浏览器Navigator加入了Javascript，提供了数据验证的基本功能。</description>
    </item>
    
    <item>
      <title>欧美游戏群魔乱舞</title>
      <link>https://pub.oribos.cn/web/fun/2020031101.html</link>
      <pubDate>Wed, 11 Mar 2020 09:55:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/fun/2020031101.html</guid>
      <description>最后生还者2 崩坏的剧情
匪夷所思的设定
非人类的逻辑
赛博朋克2077 依靠脏话吸引人
漏洞百出的设定
诡异的故事线</description>
    </item>
    
    <item>
      <title>新git仓库</title>
      <link>https://pub.oribos.cn/web/deploy/2020031102.html</link>
      <pubDate>Wed, 11 Mar 2020 08:55:02 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/deploy/2020031102.html</guid>
      <description>通过建立资源仓库和public仓库,实现源文件和网站文件同时备份,保存. 新的仓库管理方法确定了以下文件:
名称 作用 ufs 公共资源 data 私有资源 web pages 减少git仓库里的项目和仓库数量
精简仓库内文件的结构,功能融合
公共资源和私有资源的资源分离
pages 和github jsdelivr 可以代替过去的oss,网盘等功能(仅限少量内容)
特殊pages服务需要配置CDN使用.</description>
    </item>
    
    <item>
      <title>Ecs</title>
      <link>https://pub.oribos.cn/web/2020030901.html</link>
      <pubDate>Mon, 09 Mar 2020 09:55:45 +0800</pubDate>
      
      <guid>https://pub.oribos.cn/web/2020030901.html</guid>
      <description>测试在ECS服务器上部署 由于github和coding出现访问故障，安排将部分文档转移到ecs服务器上部署和访问。
部署在服务器和github上的区别 coding和github 上空间有限,服务持久.但是网络不稳定,访问困难.
部署到云服务器上,云服务器的成本和服务持久问题不好解决.</description>
    </item>
    
  </channel>
</rss>
